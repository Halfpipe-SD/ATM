{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ATM Dokumentation Startseite Abstract abstract text Das Team Wir sind die Panzerknacker. Mitglied Spezialisierung Mich\u00e9l Franz UX Juri Kaemper Text & QS Christian Lop\u00e9z Programmierung Felix M\u00f6hler Requirements Engineering Julian Thiele UML/Kollab.-Werkzeug, Entwicklungsumgebung","title":"Startseite"},{"location":"#atm-dokumentation-startseite","text":"","title":"ATM Dokumentation Startseite"},{"location":"#abstract","text":"abstract text","title":"Abstract"},{"location":"#das-team","text":"Wir sind die Panzerknacker. Mitglied Spezialisierung Mich\u00e9l Franz UX Juri Kaemper Text & QS Christian Lop\u00e9z Programmierung Felix M\u00f6hler Requirements Engineering Julian Thiele UML/Kollab.-Werkzeug, Entwicklungsumgebung","title":"Das Team"},{"location":"acceptance-docs/","text":"Abnahmedokumentation coming soon","title":"Abnahmedokumentation"},{"location":"acceptance-docs/#abnahmedokumentation","text":"coming soon","title":"Abnahmedokumentation"},{"location":"architecture-docs/","text":"Architekturdokumentation Beschreibung der Systemarchitektur Priorisierung der nicht funktionalen Anforderungen \u00c4nderbarkeit und Wiederverwendbarkeit waren uns besonders wichtig, da wir zu Beginn Schwierigkeiten hatten, uns einen \u00dcberblick \u00fcber den bestehenden Code zu verschaffen. Aus diesem Grund entschieden wir uns, den Code noch einmal von Grund auf neu zu erstellen. Eine weitere nicht funktionale Anforderung ist die Bedienbarkeit oder Benutzerfreundlichkeit des Programms. Da diese Anwendung f\u00fcr eine sehr gro\u00dfe Menge an Benutzern ausgelegt ist, wurde die Bedienbarkeit und Benutzerfreundlichkeit des Programms auf eine h\u00f6here Priorit\u00e4t gesetzt. So wird gew\u00e4hrleistet, dass Benutzer aller Altersgruppen gut mit der Anwendung interagieren k\u00f6nnen. Architekturprinzipien Nach welchen Kriterien soll das System in Komponenten unterteilt werden? Wie sollen Komponenten strukturiert und verfeinert werden? Das System wurde in verschiedene Komponenten unterteilt, die sich jeweils auf eine bestimmte Aufgabe beziehen, um eine enge Kopplung der Module untereinander zu reduzieren. Der verschachtelte Aufbau der UI Komponenten bildet eine Struktur, die leicht erweitert werden kann. Welche Aspekte sollen in Komponenten zusammengefasst werden? In der ATM.java Klasse werden die \u00c4nderungen von einem Modus in den N\u00e4chsten behandelt. Dem entsprechend wird die Screen.java Klasse angesteuert, um die UI Elemente zu aktualisieren. Die Klasse Screen.java beinhaltet alle Funktionen, die zum \u00c4ndern der UI Elemente ben\u00f6tigt werden. In ihr werden die Klassen Keypad.java und SidePanel.java verwendet. Welche Dienstleistungen sollen Komponenten nach au\u00dfen an ihrer Schnittstelle anbieten? Wie sollen die Komponenten miteinander interagieren? Die Komponente Keypad.java gibt \u00fcber das KeypadListener.java Interface alle Events f\u00fcr Tastendr\u00fccke an die Screen.java Klasse weiter. Die Komponente Screen.java gibt \u00fcber das Interface ATMListener.java Events wie z.B. einen Modus-Wechsel oder das Bet\u00e4tigen der Enter-Taste an die ATM.java Klasse weiter. Schnittstellen Hier werden alle Schnittstellen des Systems beschrieben. UI mit den Java-Swing GUI Bibliotheken KeypadListener.java f\u00fcr Kommunikationsschnittstelle zwischen dem Tastenfeld und dem Bildschirm Objekt ATMListener.java ist die Schnittstelle zum Haupt-ATM-Objekt, in der Aktionen, wie ein Wechsel in einen anderen Modus oder das Bet\u00e4tigen der Enter-Taste behandelt werden Big Picture der Systemarchitektur Der Aufbau der Systemarchitektur ist weitestgehend modular gestaltet und ist hier in einem Klassendiagramm dargestellt. TODO Klassendiagram Systementwurf Systemdekomposition Im folgenden Abschnitt werden die einzelnen Komponenten des Systems und ihre Funktionen beschrieben. Das System l\u00e4sst sich haupts\u00e4chlich durch die Bestandteile Guthaben anzeigen , Geld abheben und Geld einzahlen beschreiben. Zus\u00e4tzlich gibt es ein Men\u00fc eine Admin-Ansicht und eine Login , sowie eine Logout Funktion. Vom Men\u00fc aus, ist es einem Benutzer m\u00f6glich alle relevanten Funktionalit\u00e4ten durch das Dr\u00fccken einer Zahl zu erreichen. Die Funktion atmSwitchModeAction() wechselt nun, je nach eingegebener Zahl, in den entsprechenden Modus. Eine weitere wichtige Komponente des Systems ist das Keypad , welches die verschiedenen Kn\u00f6pfe darstellt. Dieses befindet sich immer in der linken H\u00e4lfte des Fensters und hilft dem Nutzer bei der Bedienung des Automaten. Es wird in dem Konstruktor der Klasse Screen.java zusammen mit dem SidePanel initialisiert. Das SidePanel hat, wie das Keypad, eine eigene Klasse. Es befindet sich auf der rechten H\u00e4lfte des Fensters und beinhaltet unter anderem einen \u201eBack-Button\u201c. Mit diesem kann zur\u00fcck in den \u201eMen\u00fc-Modus\u201c gewechselt werden. In dem SidePanel befindet sich au\u00dferdem das Textfeld, in welchem die Benutzereingabe angezeigt wird, sowie ein JLabel. Dieses zeigt, je nach Modus, zum Beispiel das verf\u00fcgbare Geld, oder die verschiedenen Optionen mit entsprechender Eingabe an. Eine weitere Funktionalit\u00e4t ist die Admin-Ansicht . Loggt sich ein Admin ein, \u00f6ffnet sich ein neues Fenster. In diesem k\u00f6nnen die Daten der Benutzer ge\u00e4ndert und anschlie\u00dfend gespeichert werden. Designalternativen und \u2013Entscheidungen Es wurde sich dazu entschieden die einzelnen Funktionalit\u00e4ten mit Hilfe von verschiedenen Modi zu implementieren. Der Bankautomat befindet sich zu jedem Zeitpunkt in einem bestimmten Modus und reagiert, je nach Modus, unterschiedlich auf bestimmte Eingaben. Dieser Ansatz unterscheidet sich von der urspr\u00fcnglichen Version des Automaten. Hier gab es keine Modi und die verschiedenen Funktionen, wie das Geldabheben, wurden von eigenen Klassen \u00fcbernommen. In der alten Version des Bankautomaten, konnte ein Admin mit Hilfe eines Iterators auf die einzelnen Benutzer zugreifen. In dem \u00fcberarbeiteten Modell ist es m\u00f6glich, aus einer Liste von Benutzern den gew\u00fcnschten per Mausklick auszuw\u00e4hlen. Dies erm\u00f6glicht eine einfachere und schnellere Bearbeitung. Zudem wird das Speichern der verschiedenen Benutzer nicht mehr innerhalb einer Java-Klasse \u00fcbernommen, sondern au\u00dferhalb in einer JSON-Datei. Die Benutzerdaten werden mit Hilfe der Klasse BankDatabase.java in diese Datei \u00fcbertragen. Cross-Cutting-Concerns, NFRs Nun werden kurz die Cross-Cutting-Concerns des Systems, sowie der Umgang mit diesen, vorgestellt. Ein Benutzer soll in jedem Modus eine Eingabe t\u00e4tigen k\u00f6nnen. Daher wurde das Keypad und ein entsprechendes Textfeld so implementiert, dass diese Komponenten stets sichtbar und verf\u00fcgbar sind. Andere Komponenten werden teilweise unsichtbar gemacht, da diese nicht in jedem Modus gebraucht werden. Ein weiterer Cross-Cutting-Concern ist das Geben von passendem Feedback an den Benutzer. Hier soll dem Benutzer, unabh\u00e4ngig von dem aktuellen Modus, stets mitgeteilt werden, wenn er eine ung\u00fcltige Eingabe get\u00e4tigt hat. F\u00fcr diese Art von Fehlermeldungen wurde im untersten Bereich des Fensters ein Textfeld angelegt, welches die jeweilige Nachricht in roter Farbe anzeigt. Au\u00dferdem ist die Validierung des Inputs bei einem Bankautomaten \u00e4u\u00dferst wichtig. Deshalb werden die Eingaben stets auf Richtigkeit \u00fcberpr\u00fcft. So wird beispielsweise sichergestellt, dass das eingezahlte Geld keinen Maximalwert \u00fcberschreitet. Ebenso muss sichergestellt werden, dass ein Benutzer nicht mehr Geld abheben kann, als gerade f\u00fcr ihn verf\u00fcgbar ist. Bez\u00fcglich der Nicht-funktionalen-Anforderungen wurde auf eine hohe Performance und Bedienbarkeit geachtet. Dem Benutzer wird das Bedienen des Automaten durch ein intuitives Interface leichtgemacht. Die Wartezeiten sind kurz, da die Funktionen zur Berechnung von \u00dcberweisungen und Kontost\u00e4nden eine geringe Laufzeit aufweisen. Mensch-Maschine-Schnittstelle Anforderungen an die Mensch-Maschine-Schnittstelle Die Mensch-Maschine-Schnittstelle, oder auch Benutzerschnittstelle, bezieht sich auf die Kommunikation zwischen einem Nutzer (Mensch) und dem Geldautomaten (Maschine). Der Mensch gibt mit seinen Aktoren (H\u00e4nden) eine Eingabe-Information an die Peripherieeinheiten des Geldautomaten, welche eine digitale Information an die Recheneinheit des Geldautomaten weiterleiten. Die von der Recheneinheit entgegengenommene Information wird mittels der aufgespielten Software verarbeitet und eine Ausgabe-Information wird erzeugt. Die Recheneinheit steuert digital die Peripherieeinheiten des Geldautomaten an, welche eine optische (Bildschirm-Ausgabe) und mechanische Ausgabe Information (Geldauszahlung) erzeugen. Die R\u00fcckgabe-Informationen werden vom Menschen visuell (Bildschirm-Information) und haptisch (Annahme des ausgezahlten Geldes) verarbeitet. Ein-/Ausgabe Mensch Schnittstelle Hardware Schnittstelle Software Schnittstelle Eingabe H\u00e4nde Encrypting PIN Pad Tastenabfrage Augen ID-Kartenleser, Softkeys oder Touchscreen Touchbildschirm Abfrage Ausgabe H\u00e4nde Bildschirm Grafikausgabe Augen Auszahlmodul Peripherie Ansteuerung Gestaltungsprinzipien und Style-Guide Interatkionsmodellierung Benutzer: Geld abheben Der Benutzer Inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt sein Passwort ein um sich zu authentifizieren. ATM Zeigt das Men\u00fc zu weiteren Auswahl an. Der Benutzer dr\u00fcckt \u201eAbbruch\u201c. ATM zeigt Men\u00fc zur weiteren Auswahl an. Der Benutzer W\u00e4hlt Betrag und St\u00fcckelung. ATM zahlt Betrag in gew\u00fcnschter St\u00fcckelung aus, zeigt neuen Kontostand an und wirft Bankkarte aus. Der Benutzer nimmt die Karte. ATM zeigt Willkommens Bildschirm Geld einzahlen Der Benutzer Inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt sein Passwort ein um sich zu authentifizieren. ATM Zeigt das Men\u00fc zu weiteren Auswahl an. Der Benutzer dr\u00fcckt \u201eGeld einzahlen\u201c . ATM zeigt Informationsbildschirm und \u00f6ffnet Deposit-Slot. Benutzer dr\u00fcckt \u201eAbbruch\u201c. ATM zeigt Men\u00fc zur weiteren Auswahl an. Benutzer legt Bargeld in den Deposit-Slot. Benutzer dr\u00fcckt \u201eBest\u00e4tigen\u201c. ATM schlie\u00dft den Deposit-Slot, validiert die Eingabe, bei erfolgreicher Pr\u00fcfung wird der betrag dem Bankkonto gutgeschrieben und das Men\u00fc zu weiteren Auswahl angezeigt. Benutzer dr\u00fcckt \u201eBest\u00e4tigen\u201c. ATM schlie\u00dft den Deposit-Slot, validiert die Eingabe und bei nicht erfolgreicher Pr\u00fcfung wird Deposit-Slot wieder ge\u00f6ffnet. Benutzer entnimmt das Bargeld. ATM wirft Bankkarte aus und zeigt Willkommens Bildschirm an. Der Benutzer nimmt die Karte. ATM zeigt Willkommens Bildschirm an. Kontostand anzeigen Der Benutzer Inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt sein Passwort ein um sich zu authentifizieren. ATM Zeigt das Men\u00fc zu weiteren Auswahl an. Benutzer dr\u00fcckt \u201eKontostand anzeigen\u201c. ATM zeigt Bildschirm mit Kontostand und Datum. Benutzer dr\u00fcckt \u201eWeitere Auswahl\u201c. ATM zeigt Bildschirm zur weiteren Auswahl an. Logout Der Benutzer Inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt sein Passwort ein um sich zu authentifizieren. ATM Zeigt das Men\u00fc zu weiteren Auswahl an. Der Benutzer dr\u00fcckt \u201eLogout\u201c. ATM wirft Bankkarte aus. Der Benutzer nimmt die Karte. ATM zeigt Willkommens Bildschirm an. Adminansicht: Benutzeransicht:","title":"Architekturdokumentation"},{"location":"architecture-docs/#architekturdokumentation","text":"","title":"Architekturdokumentation"},{"location":"architecture-docs/#beschreibung-der-systemarchitektur","text":"","title":"Beschreibung der Systemarchitektur"},{"location":"architecture-docs/#priorisierung-der-nicht-funktionalen-anforderungen","text":"\u00c4nderbarkeit und Wiederverwendbarkeit waren uns besonders wichtig, da wir zu Beginn Schwierigkeiten hatten, uns einen \u00dcberblick \u00fcber den bestehenden Code zu verschaffen. Aus diesem Grund entschieden wir uns, den Code noch einmal von Grund auf neu zu erstellen. Eine weitere nicht funktionale Anforderung ist die Bedienbarkeit oder Benutzerfreundlichkeit des Programms. Da diese Anwendung f\u00fcr eine sehr gro\u00dfe Menge an Benutzern ausgelegt ist, wurde die Bedienbarkeit und Benutzerfreundlichkeit des Programms auf eine h\u00f6here Priorit\u00e4t gesetzt. So wird gew\u00e4hrleistet, dass Benutzer aller Altersgruppen gut mit der Anwendung interagieren k\u00f6nnen.","title":"Priorisierung der nicht funktionalen Anforderungen"},{"location":"architecture-docs/#architekturprinzipien","text":"Nach welchen Kriterien soll das System in Komponenten unterteilt werden? Wie sollen Komponenten strukturiert und verfeinert werden? Das System wurde in verschiedene Komponenten unterteilt, die sich jeweils auf eine bestimmte Aufgabe beziehen, um eine enge Kopplung der Module untereinander zu reduzieren. Der verschachtelte Aufbau der UI Komponenten bildet eine Struktur, die leicht erweitert werden kann. Welche Aspekte sollen in Komponenten zusammengefasst werden? In der ATM.java Klasse werden die \u00c4nderungen von einem Modus in den N\u00e4chsten behandelt. Dem entsprechend wird die Screen.java Klasse angesteuert, um die UI Elemente zu aktualisieren. Die Klasse Screen.java beinhaltet alle Funktionen, die zum \u00c4ndern der UI Elemente ben\u00f6tigt werden. In ihr werden die Klassen Keypad.java und SidePanel.java verwendet. Welche Dienstleistungen sollen Komponenten nach au\u00dfen an ihrer Schnittstelle anbieten? Wie sollen die Komponenten miteinander interagieren? Die Komponente Keypad.java gibt \u00fcber das KeypadListener.java Interface alle Events f\u00fcr Tastendr\u00fccke an die Screen.java Klasse weiter. Die Komponente Screen.java gibt \u00fcber das Interface ATMListener.java Events wie z.B. einen Modus-Wechsel oder das Bet\u00e4tigen der Enter-Taste an die ATM.java Klasse weiter.","title":"Architekturprinzipien"},{"location":"architecture-docs/#schnittstellen","text":"Hier werden alle Schnittstellen des Systems beschrieben. UI mit den Java-Swing GUI Bibliotheken KeypadListener.java f\u00fcr Kommunikationsschnittstelle zwischen dem Tastenfeld und dem Bildschirm Objekt ATMListener.java ist die Schnittstelle zum Haupt-ATM-Objekt, in der Aktionen, wie ein Wechsel in einen anderen Modus oder das Bet\u00e4tigen der Enter-Taste behandelt werden","title":"Schnittstellen"},{"location":"architecture-docs/#big-picture-der-systemarchitektur","text":"Der Aufbau der Systemarchitektur ist weitestgehend modular gestaltet und ist hier in einem Klassendiagramm dargestellt. TODO Klassendiagram","title":"Big Picture der Systemarchitektur"},{"location":"architecture-docs/#systementwurf","text":"","title":"Systementwurf"},{"location":"architecture-docs/#systemdekomposition","text":"Im folgenden Abschnitt werden die einzelnen Komponenten des Systems und ihre Funktionen beschrieben. Das System l\u00e4sst sich haupts\u00e4chlich durch die Bestandteile Guthaben anzeigen , Geld abheben und Geld einzahlen beschreiben. Zus\u00e4tzlich gibt es ein Men\u00fc eine Admin-Ansicht und eine Login , sowie eine Logout Funktion. Vom Men\u00fc aus, ist es einem Benutzer m\u00f6glich alle relevanten Funktionalit\u00e4ten durch das Dr\u00fccken einer Zahl zu erreichen. Die Funktion atmSwitchModeAction() wechselt nun, je nach eingegebener Zahl, in den entsprechenden Modus. Eine weitere wichtige Komponente des Systems ist das Keypad , welches die verschiedenen Kn\u00f6pfe darstellt. Dieses befindet sich immer in der linken H\u00e4lfte des Fensters und hilft dem Nutzer bei der Bedienung des Automaten. Es wird in dem Konstruktor der Klasse Screen.java zusammen mit dem SidePanel initialisiert. Das SidePanel hat, wie das Keypad, eine eigene Klasse. Es befindet sich auf der rechten H\u00e4lfte des Fensters und beinhaltet unter anderem einen \u201eBack-Button\u201c. Mit diesem kann zur\u00fcck in den \u201eMen\u00fc-Modus\u201c gewechselt werden. In dem SidePanel befindet sich au\u00dferdem das Textfeld, in welchem die Benutzereingabe angezeigt wird, sowie ein JLabel. Dieses zeigt, je nach Modus, zum Beispiel das verf\u00fcgbare Geld, oder die verschiedenen Optionen mit entsprechender Eingabe an. Eine weitere Funktionalit\u00e4t ist die Admin-Ansicht . Loggt sich ein Admin ein, \u00f6ffnet sich ein neues Fenster. In diesem k\u00f6nnen die Daten der Benutzer ge\u00e4ndert und anschlie\u00dfend gespeichert werden.","title":"Systemdekomposition"},{"location":"architecture-docs/#designalternativen-und-entscheidungen","text":"Es wurde sich dazu entschieden die einzelnen Funktionalit\u00e4ten mit Hilfe von verschiedenen Modi zu implementieren. Der Bankautomat befindet sich zu jedem Zeitpunkt in einem bestimmten Modus und reagiert, je nach Modus, unterschiedlich auf bestimmte Eingaben. Dieser Ansatz unterscheidet sich von der urspr\u00fcnglichen Version des Automaten. Hier gab es keine Modi und die verschiedenen Funktionen, wie das Geldabheben, wurden von eigenen Klassen \u00fcbernommen. In der alten Version des Bankautomaten, konnte ein Admin mit Hilfe eines Iterators auf die einzelnen Benutzer zugreifen. In dem \u00fcberarbeiteten Modell ist es m\u00f6glich, aus einer Liste von Benutzern den gew\u00fcnschten per Mausklick auszuw\u00e4hlen. Dies erm\u00f6glicht eine einfachere und schnellere Bearbeitung. Zudem wird das Speichern der verschiedenen Benutzer nicht mehr innerhalb einer Java-Klasse \u00fcbernommen, sondern au\u00dferhalb in einer JSON-Datei. Die Benutzerdaten werden mit Hilfe der Klasse BankDatabase.java in diese Datei \u00fcbertragen.","title":"Designalternativen und \u2013Entscheidungen"},{"location":"architecture-docs/#cross-cutting-concerns-nfrs","text":"Nun werden kurz die Cross-Cutting-Concerns des Systems, sowie der Umgang mit diesen, vorgestellt. Ein Benutzer soll in jedem Modus eine Eingabe t\u00e4tigen k\u00f6nnen. Daher wurde das Keypad und ein entsprechendes Textfeld so implementiert, dass diese Komponenten stets sichtbar und verf\u00fcgbar sind. Andere Komponenten werden teilweise unsichtbar gemacht, da diese nicht in jedem Modus gebraucht werden. Ein weiterer Cross-Cutting-Concern ist das Geben von passendem Feedback an den Benutzer. Hier soll dem Benutzer, unabh\u00e4ngig von dem aktuellen Modus, stets mitgeteilt werden, wenn er eine ung\u00fcltige Eingabe get\u00e4tigt hat. F\u00fcr diese Art von Fehlermeldungen wurde im untersten Bereich des Fensters ein Textfeld angelegt, welches die jeweilige Nachricht in roter Farbe anzeigt. Au\u00dferdem ist die Validierung des Inputs bei einem Bankautomaten \u00e4u\u00dferst wichtig. Deshalb werden die Eingaben stets auf Richtigkeit \u00fcberpr\u00fcft. So wird beispielsweise sichergestellt, dass das eingezahlte Geld keinen Maximalwert \u00fcberschreitet. Ebenso muss sichergestellt werden, dass ein Benutzer nicht mehr Geld abheben kann, als gerade f\u00fcr ihn verf\u00fcgbar ist. Bez\u00fcglich der Nicht-funktionalen-Anforderungen wurde auf eine hohe Performance und Bedienbarkeit geachtet. Dem Benutzer wird das Bedienen des Automaten durch ein intuitives Interface leichtgemacht. Die Wartezeiten sind kurz, da die Funktionen zur Berechnung von \u00dcberweisungen und Kontost\u00e4nden eine geringe Laufzeit aufweisen.","title":"Cross-Cutting-Concerns, NFRs"},{"location":"architecture-docs/#mensch-maschine-schnittstelle","text":"","title":"Mensch-Maschine-Schnittstelle"},{"location":"architecture-docs/#anforderungen-an-die-mensch-maschine-schnittstelle","text":"Die Mensch-Maschine-Schnittstelle, oder auch Benutzerschnittstelle, bezieht sich auf die Kommunikation zwischen einem Nutzer (Mensch) und dem Geldautomaten (Maschine). Der Mensch gibt mit seinen Aktoren (H\u00e4nden) eine Eingabe-Information an die Peripherieeinheiten des Geldautomaten, welche eine digitale Information an die Recheneinheit des Geldautomaten weiterleiten. Die von der Recheneinheit entgegengenommene Information wird mittels der aufgespielten Software verarbeitet und eine Ausgabe-Information wird erzeugt. Die Recheneinheit steuert digital die Peripherieeinheiten des Geldautomaten an, welche eine optische (Bildschirm-Ausgabe) und mechanische Ausgabe Information (Geldauszahlung) erzeugen. Die R\u00fcckgabe-Informationen werden vom Menschen visuell (Bildschirm-Information) und haptisch (Annahme des ausgezahlten Geldes) verarbeitet. Ein-/Ausgabe Mensch Schnittstelle Hardware Schnittstelle Software Schnittstelle Eingabe H\u00e4nde Encrypting PIN Pad Tastenabfrage Augen ID-Kartenleser, Softkeys oder Touchscreen Touchbildschirm Abfrage Ausgabe H\u00e4nde Bildschirm Grafikausgabe Augen Auszahlmodul Peripherie Ansteuerung","title":"Anforderungen an die Mensch-Maschine-Schnittstelle"},{"location":"architecture-docs/#gestaltungsprinzipien-und-style-guide","text":"","title":"Gestaltungsprinzipien und Style-Guide"},{"location":"architecture-docs/#interatkionsmodellierung","text":"Benutzer: Geld abheben Der Benutzer Inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt sein Passwort ein um sich zu authentifizieren. ATM Zeigt das Men\u00fc zu weiteren Auswahl an. Der Benutzer dr\u00fcckt \u201eAbbruch\u201c. ATM zeigt Men\u00fc zur weiteren Auswahl an. Der Benutzer W\u00e4hlt Betrag und St\u00fcckelung. ATM zahlt Betrag in gew\u00fcnschter St\u00fcckelung aus, zeigt neuen Kontostand an und wirft Bankkarte aus. Der Benutzer nimmt die Karte. ATM zeigt Willkommens Bildschirm Geld einzahlen Der Benutzer Inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt sein Passwort ein um sich zu authentifizieren. ATM Zeigt das Men\u00fc zu weiteren Auswahl an. Der Benutzer dr\u00fcckt \u201eGeld einzahlen\u201c . ATM zeigt Informationsbildschirm und \u00f6ffnet Deposit-Slot. Benutzer dr\u00fcckt \u201eAbbruch\u201c. ATM zeigt Men\u00fc zur weiteren Auswahl an. Benutzer legt Bargeld in den Deposit-Slot. Benutzer dr\u00fcckt \u201eBest\u00e4tigen\u201c. ATM schlie\u00dft den Deposit-Slot, validiert die Eingabe, bei erfolgreicher Pr\u00fcfung wird der betrag dem Bankkonto gutgeschrieben und das Men\u00fc zu weiteren Auswahl angezeigt. Benutzer dr\u00fcckt \u201eBest\u00e4tigen\u201c. ATM schlie\u00dft den Deposit-Slot, validiert die Eingabe und bei nicht erfolgreicher Pr\u00fcfung wird Deposit-Slot wieder ge\u00f6ffnet. Benutzer entnimmt das Bargeld. ATM wirft Bankkarte aus und zeigt Willkommens Bildschirm an. Der Benutzer nimmt die Karte. ATM zeigt Willkommens Bildschirm an. Kontostand anzeigen Der Benutzer Inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt sein Passwort ein um sich zu authentifizieren. ATM Zeigt das Men\u00fc zu weiteren Auswahl an. Benutzer dr\u00fcckt \u201eKontostand anzeigen\u201c. ATM zeigt Bildschirm mit Kontostand und Datum. Benutzer dr\u00fcckt \u201eWeitere Auswahl\u201c. ATM zeigt Bildschirm zur weiteren Auswahl an. Logout Der Benutzer Inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt sein Passwort ein um sich zu authentifizieren. ATM Zeigt das Men\u00fc zu weiteren Auswahl an. Der Benutzer dr\u00fcckt \u201eLogout\u201c. ATM wirft Bankkarte aus. Der Benutzer nimmt die Karte. ATM zeigt Willkommens Bildschirm an. Adminansicht: Benutzeransicht:","title":"Interatkionsmodellierung"},{"location":"project-docs/","text":"Projektdokumentation coming soon","title":"Projektdokumentation"},{"location":"project-docs/#projektdokumentation","text":"coming soon","title":"Projektdokumentation"},{"location":"requirements-docs/","text":"Anforderungsdokumentation Produktvision und Produktziele Produktvision Eine regionale Bank hat unser externes Software-Entwicklerteam f\u00fcr einen Auftrag eingestellt. Bei dem uns \u00fcbertragenem Projekt handelt es sich um die fehlerhafte Software einer ATM (Automated Teller Machine) zu deutsch Bankautomat. Der bereits existente Programmcode wurde von einem externen Unternehmen entwickelt, so dass der Kunde kein Expertenwissen zum Programm verf\u00fcgt, au\u00dferdem fehlt auch die Dokumentation vollst\u00e4ndig. Um dem Bankunternehmen nun die Verwendung des Systems zu erm\u00f6glichen, muss das Programm komplett \u00fcberarbeitet werden, dar\u00fcber hinaus soll eine detaillierte Dokumentation (vollst\u00e4ndig in deutsch) f\u00fcr die Bank erstellt werden. Das fehlerfreie Programm mit den bereits integrierten Features und einer strukturierten Dokumentation ist unser Basisfaktor. Das Programm ist f\u00fcr die Bankautomaten der Bank in Deutschland vorgesehen. Die Dokumentation soll die Entwicklung sowie die Funktionen der Software zusammenfassen und den zust\u00e4ndigen Mitarbeiter verst\u00e4ndlich machen. Produktziele Die Aufgabe unseres Teams ist es den bereits vorhandenen Code so zu \u00fcberarbeiten, dass dieser voll funktionsf\u00e4hig ist und eine sichere Laufzeit gew\u00e4hrleistet werden kann. Zur Entwicklung der Software ist eine vollst\u00e4ndig deutsche Dokumentation vorgesehen mit Anforderungs -, Architektur -, Test -, Abnahme -, Benutzer -, Projekt -, und Codedokumentation . Rollen und Personas Rollen Hier werden die Rollen beschrieben, denen ein Benutzer angeh\u00f6ren kann. Rollen Beschreibung Benutzer Die Benutzer sind Kunden der Bank, die den Geldautomaten zur Verf\u00fcgung stellt Administrator Administratoren des Bankautomatensystems, die Verwaltungsrechte \u00fcber alle Benutzer besitzen Personas Personas veranschaulichen typische Vertreter Ihrer Zielgruppe. Gertrude Gabel Rolle Benutzer Alter 65 Geschlecht weiblich T\u00e4tigkeit Rentnerin Familienstand verheiratet Bildung Mittelschule Computerkenntnisse Keine Interessen und Hobbies Wandern, Kaffee trinken Einstellung zum Produkt \"Eine tolle Maschine, tut was sie soll\" W\u00fcnsche Einfache Bedienung, wenig zum Merken Peter Lustig Rolle Benutzer Alter 38 Geschlecht m\u00e4nnlich T\u00e4tigkeit Handwerker Familienstand verheiratet Bildung Realschule Computerkenntnisse Grundkenntnisse Interessen und Hobbies Autos, Actionfilme, Fahrradfahren Einstellung zum Produkt \"Hoffentlich werden die neuen Geldautomaten besser\" W\u00fcnsche N\u00fctzliche Funktionen, Schnelle Bedienbarkeit Andy Auman Rolle Administrator Alter 29 Geschlecht m\u00e4nnlich T\u00e4tigkeit Systemadministrator Familienstand ledig Bildung Abitur Computerkenntnisse Fachkenntnisse Interessen und Hobbies Programmierung, Netzwerke, Gaming Einstellung zum Produkt \"\" W\u00fcnsche Viele Funktionen, Wenig Konfigurationsaufwand Mathias Jung Rolle Benutzer Alter 19 Geschlecht m\u00e4nnlich T\u00e4tigkeit Student Familienstand ledig Bildung Abitur Computerkenntnisse Grundkenntnisse Interessen und Hobbies BWL / Wirtschaft Einstellung zum Produkt \"\" W\u00fcnsche Schnelle und Einfache Transaktionen User Stories User Stories sind W\u00fcnsche an eine Software, die aus Sicht des Endbenutzers verfasst wurden. Als [Rolle] m\u00f6chte ich [Ziel/Wunsch] , um [Nutzen] Als Benutzer m\u00f6chte ich verschiedene Geldbetr\u00e4ge eingeben , um diese abzuheben Als Benutzer m\u00f6chte ich sehen, wie viel Geld auf meinem Konto ist, um zu wissen, wie viel ich noch abheben kann Als Benutzer m\u00f6chte ich eine maximal Debit Betrag pro Tag festlegen k\u00f6nnen, um bei Diebstahl den Verlust zu minimieren Als Benutzer m\u00f6chte ich eine vierstellige Pin zu meiner Karte eingeben m\u00fcssen, um Gelddiebstahl von meinem Konto zu vermeiden Als Benutzer m\u00f6chte ich die Ziffern meiner Pin \u00e4ndern k\u00f6nnen, um sie mir besser merken zu k\u00f6nnen Als Benutzer m\u00f6chte ich die L\u00e4nge meiner Pin \u00e4ndern k\u00f6nnen, um die Sicherheit zu verbessern Als Benutzer m\u00f6chte ich eine St\u00fcckelung ausw\u00e4hlen k\u00f6nnen, um gew\u00fcnschte Scheine zu erhalten Als Benutzer m\u00f6chte ich mich auf meinem Konto einloggen k\u00f6nnen, um get\u00e4tigte Transaktionen zu sehen Als Mitglied einer anderen Bank m\u00f6chte ich gegen Geb\u00fchren Geld abheben k\u00f6nnen, um \u00f6rtlich flexibel zu sein Als Administrator der Bank m\u00f6chte ich eine vollst\u00e4ndige und detaillierte Dokumentation , um im Fehlerfall schnell handeln zu k\u00f6nnen Aufgaben Auflistung aller Aufgaben dieses Projektes. Anfertigen einer Ist-Dokumentation des Codes Funktionen aus User Stories implementieren Codeverbesserungen in Delta-Dokumentation beschreiben Anfertigen einer Anforderungsdokumentation Anfertigen einer Systemdokumentation Anfertigen einer Testdokumentation Anfertigen einer Abnahmedokumentation Anfertigen einer Benutzerdokumentation Anfertigen einer Projektdokumentation Begriffslexikon Hier werden alle fachspezifische Begriffe aufgelistet, die in diesem Projekt verwendet werden. Begriff Bedeutung Beschreibung Cash Dispenser Bargeld im ATM-Dispenser - Deposit Slot Geldfach zum Ein- und Auszahlen - Balance Ist-Saldo auf einem Account - Withdrawal Geld abheben - Account Pin Geheimpin eines Accounts (unique) - Account number Nummer eines Accounts (unique) - Credit Gutschrift - Debit Maximale Auszahlung pro Tag - Mengenger\u00fcst Das Mengenger\u00fcst beschreibt quantitativ die Komponenten eines Projektes. Bezeichnung Beschreibung Menge Einheit Pin Stellenanzahl der Pin 4 Stellen Geldautomaten Anzahl Geldautomaten in Aschaffenburg 43 St\u00fcck Debit Maximale Auszahlung pro Tag 1000 Euro Nutzer Maximale Nutzer gleichzeitig 1 Person Nutzer Maximal registrierte Nutzer Transaktion Maximale Transaktion pro Minute Use Cases In diesem Anwendungsfalldiagramm wird das nach au\u00dfen sichtbare Verhalten des Systems aus Sicht der Nutzer beschrieben.","title":"Anforderungsdokumentation"},{"location":"requirements-docs/#anforderungsdokumentation","text":"","title":"Anforderungsdokumentation"},{"location":"requirements-docs/#produktvision-und-produktziele","text":"","title":"Produktvision und Produktziele"},{"location":"requirements-docs/#produktvision","text":"Eine regionale Bank hat unser externes Software-Entwicklerteam f\u00fcr einen Auftrag eingestellt. Bei dem uns \u00fcbertragenem Projekt handelt es sich um die fehlerhafte Software einer ATM (Automated Teller Machine) zu deutsch Bankautomat. Der bereits existente Programmcode wurde von einem externen Unternehmen entwickelt, so dass der Kunde kein Expertenwissen zum Programm verf\u00fcgt, au\u00dferdem fehlt auch die Dokumentation vollst\u00e4ndig. Um dem Bankunternehmen nun die Verwendung des Systems zu erm\u00f6glichen, muss das Programm komplett \u00fcberarbeitet werden, dar\u00fcber hinaus soll eine detaillierte Dokumentation (vollst\u00e4ndig in deutsch) f\u00fcr die Bank erstellt werden. Das fehlerfreie Programm mit den bereits integrierten Features und einer strukturierten Dokumentation ist unser Basisfaktor. Das Programm ist f\u00fcr die Bankautomaten der Bank in Deutschland vorgesehen. Die Dokumentation soll die Entwicklung sowie die Funktionen der Software zusammenfassen und den zust\u00e4ndigen Mitarbeiter verst\u00e4ndlich machen.","title":"Produktvision"},{"location":"requirements-docs/#produktziele","text":"Die Aufgabe unseres Teams ist es den bereits vorhandenen Code so zu \u00fcberarbeiten, dass dieser voll funktionsf\u00e4hig ist und eine sichere Laufzeit gew\u00e4hrleistet werden kann. Zur Entwicklung der Software ist eine vollst\u00e4ndig deutsche Dokumentation vorgesehen mit Anforderungs -, Architektur -, Test -, Abnahme -, Benutzer -, Projekt -, und Codedokumentation .","title":"Produktziele"},{"location":"requirements-docs/#rollen-und-personas","text":"","title":"Rollen und Personas"},{"location":"requirements-docs/#rollen","text":"Hier werden die Rollen beschrieben, denen ein Benutzer angeh\u00f6ren kann. Rollen Beschreibung Benutzer Die Benutzer sind Kunden der Bank, die den Geldautomaten zur Verf\u00fcgung stellt Administrator Administratoren des Bankautomatensystems, die Verwaltungsrechte \u00fcber alle Benutzer besitzen","title":"Rollen"},{"location":"requirements-docs/#personas","text":"Personas veranschaulichen typische Vertreter Ihrer Zielgruppe. Gertrude Gabel Rolle Benutzer Alter 65 Geschlecht weiblich T\u00e4tigkeit Rentnerin Familienstand verheiratet Bildung Mittelschule Computerkenntnisse Keine Interessen und Hobbies Wandern, Kaffee trinken Einstellung zum Produkt \"Eine tolle Maschine, tut was sie soll\" W\u00fcnsche Einfache Bedienung, wenig zum Merken Peter Lustig Rolle Benutzer Alter 38 Geschlecht m\u00e4nnlich T\u00e4tigkeit Handwerker Familienstand verheiratet Bildung Realschule Computerkenntnisse Grundkenntnisse Interessen und Hobbies Autos, Actionfilme, Fahrradfahren Einstellung zum Produkt \"Hoffentlich werden die neuen Geldautomaten besser\" W\u00fcnsche N\u00fctzliche Funktionen, Schnelle Bedienbarkeit Andy Auman Rolle Administrator Alter 29 Geschlecht m\u00e4nnlich T\u00e4tigkeit Systemadministrator Familienstand ledig Bildung Abitur Computerkenntnisse Fachkenntnisse Interessen und Hobbies Programmierung, Netzwerke, Gaming Einstellung zum Produkt \"\" W\u00fcnsche Viele Funktionen, Wenig Konfigurationsaufwand Mathias Jung Rolle Benutzer Alter 19 Geschlecht m\u00e4nnlich T\u00e4tigkeit Student Familienstand ledig Bildung Abitur Computerkenntnisse Grundkenntnisse Interessen und Hobbies BWL / Wirtschaft Einstellung zum Produkt \"\" W\u00fcnsche Schnelle und Einfache Transaktionen","title":"Personas"},{"location":"requirements-docs/#user-stories","text":"User Stories sind W\u00fcnsche an eine Software, die aus Sicht des Endbenutzers verfasst wurden. Als [Rolle] m\u00f6chte ich [Ziel/Wunsch] , um [Nutzen] Als Benutzer m\u00f6chte ich verschiedene Geldbetr\u00e4ge eingeben , um diese abzuheben Als Benutzer m\u00f6chte ich sehen, wie viel Geld auf meinem Konto ist, um zu wissen, wie viel ich noch abheben kann Als Benutzer m\u00f6chte ich eine maximal Debit Betrag pro Tag festlegen k\u00f6nnen, um bei Diebstahl den Verlust zu minimieren Als Benutzer m\u00f6chte ich eine vierstellige Pin zu meiner Karte eingeben m\u00fcssen, um Gelddiebstahl von meinem Konto zu vermeiden Als Benutzer m\u00f6chte ich die Ziffern meiner Pin \u00e4ndern k\u00f6nnen, um sie mir besser merken zu k\u00f6nnen Als Benutzer m\u00f6chte ich die L\u00e4nge meiner Pin \u00e4ndern k\u00f6nnen, um die Sicherheit zu verbessern Als Benutzer m\u00f6chte ich eine St\u00fcckelung ausw\u00e4hlen k\u00f6nnen, um gew\u00fcnschte Scheine zu erhalten Als Benutzer m\u00f6chte ich mich auf meinem Konto einloggen k\u00f6nnen, um get\u00e4tigte Transaktionen zu sehen Als Mitglied einer anderen Bank m\u00f6chte ich gegen Geb\u00fchren Geld abheben k\u00f6nnen, um \u00f6rtlich flexibel zu sein Als Administrator der Bank m\u00f6chte ich eine vollst\u00e4ndige und detaillierte Dokumentation , um im Fehlerfall schnell handeln zu k\u00f6nnen","title":"User Stories"},{"location":"requirements-docs/#aufgaben","text":"Auflistung aller Aufgaben dieses Projektes. Anfertigen einer Ist-Dokumentation des Codes Funktionen aus User Stories implementieren Codeverbesserungen in Delta-Dokumentation beschreiben Anfertigen einer Anforderungsdokumentation Anfertigen einer Systemdokumentation Anfertigen einer Testdokumentation Anfertigen einer Abnahmedokumentation Anfertigen einer Benutzerdokumentation Anfertigen einer Projektdokumentation","title":"Aufgaben"},{"location":"requirements-docs/#begriffslexikon","text":"Hier werden alle fachspezifische Begriffe aufgelistet, die in diesem Projekt verwendet werden. Begriff Bedeutung Beschreibung Cash Dispenser Bargeld im ATM-Dispenser - Deposit Slot Geldfach zum Ein- und Auszahlen - Balance Ist-Saldo auf einem Account - Withdrawal Geld abheben - Account Pin Geheimpin eines Accounts (unique) - Account number Nummer eines Accounts (unique) - Credit Gutschrift - Debit Maximale Auszahlung pro Tag -","title":"Begriffslexikon"},{"location":"requirements-docs/#mengengerust","text":"Das Mengenger\u00fcst beschreibt quantitativ die Komponenten eines Projektes. Bezeichnung Beschreibung Menge Einheit Pin Stellenanzahl der Pin 4 Stellen Geldautomaten Anzahl Geldautomaten in Aschaffenburg 43 St\u00fcck Debit Maximale Auszahlung pro Tag 1000 Euro Nutzer Maximale Nutzer gleichzeitig 1 Person Nutzer Maximal registrierte Nutzer Transaktion Maximale Transaktion pro Minute","title":"Mengenger\u00fcst"},{"location":"requirements-docs/#use-cases","text":"In diesem Anwendungsfalldiagramm wird das nach au\u00dfen sichtbare Verhalten des Systems aus Sicht der Nutzer beschrieben.","title":"Use Cases"},{"location":"test-docs/","text":"Testdokumentation In der folgenden Dokumentation werden die f\u00fcr das Projekt durchgef\u00fchrten Test beschrieben. Diese sind entweder manuell oder mit Hilfe von JUnit ausgef\u00fchrt worden. Name Sind Komponenten initialisiert Anforderung Die ATM-Instanz soll einen screen und eine bankDatabase haben Vorbedingung ATM-Instanz wird erzeugt Nachbedingung Screen und bankDatabase des ATM sindinitialisiert Testschritte Stelle sicher, dass Komponenten nicht null sind Name Wechsel in BALANCE Modus Anforderung Mit dem Input \"1\" soll in den BALANCE Modus gewechselt werden Vorbedingung ATM-Instanz wird erzeugt User loggt sich ein Momentan im MENU Modus Nachbedingung Guthaben wird angezeigt ATM im BALANCE Modus Testschritte Funktion atm.atmEnterAction() wird mit Input \"1\" aufgerufen Name Falscher Input in Men\u00fc Anforderung Bei falschem Input soll ATM im selben Modus bleiben Vorbedingung ATM-Instanz wird erzeugt User loggt sich ein Momentan im MENU Modus Nachbedingung ATM gibt Fehlermeldung, resettet das Textfeld und bleibt im selben Modus Testschritte Funktion atm.atmEnterAction() wird mit falschem Input aufgerufen Name \"Back\" Button Anforderung Der \"Back\" Button, soll den Modus zu MENU wechseln Vorbedingung ATM-Instanz wird erzeugt User loggt sich ein Momentan im MENU Modus Nachbedingung ATM befindet sich wieder im MENU Modus Testschritte Wechsel in BALANCE Modus, Dr\u00fccken auf \"Back\" Button Wechsel in WITHDRAWAL Modus, Dr\u00fccken auf \"Back\" Button Wechsel in DEPOSIT Modus, Dr\u00fccken auf \"Back\" Button Name \"Clear\" Button Anforderung Bei Dr\u00fccken auf den \"Clear\"-Button soll das Textfeld resettet werden Vorbedingung ATM-Instanz wird erzeugt User loggt sich ein Momentan im MENU Modus Nachbedingung Das Textfeld ist leer Testschritte Beliebiger Input wird in Textfeld eingegeben \"Clear\"-Button wird gedr\u00fcckt Name Ung\u00fcltiger Pin Input Anforderung Bei falscher Pin soll eine LoginFailedException geworfen werden Vorbedingung ATM-Instanz wird erzeugt Ein neuer Account wird erstellt Nachbedingung ATM hat keinen Pin akzeptiert, da Pins aus 4 Ziffern bestehen m\u00fcssen ATM befindet sich noch im LOGIN Modus Testschritte Anmeldungsversuche mit verschieden ung\u00fcltigen Pins Zuerst ein Pin mit Buchstaben, dann ein Pin mit 5 Ziffern und zuletzt ein Pin mit 3 Ziffern Name Neuen Account erstellen Anforderung In der AdminView soll ein neuer Account erstellt werden k\u00f6nnen Vorbedingung ATM-Instanz wird erzeugt Nachbedingung Neuer Account wurde angelegt ATM im ADMIN Modus Testschritte Neuer Admin-Account wird erstellt und der Datenbank hinzugef\u00fcgt Der Admin loggt sich mit seiner Pin ein \u00dcberpr\u00fcfen, ob die L\u00e4nge der Account Liste sich um 1 erh\u00f6ht hat Name Credit und Debit Funktion Anforderung Credit Funktion soll das Guthaben um mitgegebenen Betrag erh\u00f6hen Debit Funktion soll das Guthaben um mitgegebenen Wert verringern Vorbedingung ATM-Instanz wird erzeugt Neuer Account \"a1\" wird angelegt Nachbedingung Guthaben ist gleich hoch wie vor der Durchf\u00fchrung des Tests Testschritte a1.credit(5) wird aufgerufen \u00dcberpr\u00fcfen, ob sich Guthaben um 5 erh\u00f6ht hat a1.debit(5) wird aufgerufen \u00dcberpr\u00fcfen, ob sich Guthaben um 5 verringert hat","title":"Testdokumentation"},{"location":"test-docs/#testdokumentation","text":"In der folgenden Dokumentation werden die f\u00fcr das Projekt durchgef\u00fchrten Test beschrieben. Diese sind entweder manuell oder mit Hilfe von JUnit ausgef\u00fchrt worden. Name Sind Komponenten initialisiert Anforderung Die ATM-Instanz soll einen screen und eine bankDatabase haben Vorbedingung ATM-Instanz wird erzeugt Nachbedingung Screen und bankDatabase des ATM sindinitialisiert Testschritte Stelle sicher, dass Komponenten nicht null sind Name Wechsel in BALANCE Modus Anforderung Mit dem Input \"1\" soll in den BALANCE Modus gewechselt werden Vorbedingung ATM-Instanz wird erzeugt User loggt sich ein Momentan im MENU Modus Nachbedingung Guthaben wird angezeigt ATM im BALANCE Modus Testschritte Funktion atm.atmEnterAction() wird mit Input \"1\" aufgerufen Name Falscher Input in Men\u00fc Anforderung Bei falschem Input soll ATM im selben Modus bleiben Vorbedingung ATM-Instanz wird erzeugt User loggt sich ein Momentan im MENU Modus Nachbedingung ATM gibt Fehlermeldung, resettet das Textfeld und bleibt im selben Modus Testschritte Funktion atm.atmEnterAction() wird mit falschem Input aufgerufen Name \"Back\" Button Anforderung Der \"Back\" Button, soll den Modus zu MENU wechseln Vorbedingung ATM-Instanz wird erzeugt User loggt sich ein Momentan im MENU Modus Nachbedingung ATM befindet sich wieder im MENU Modus Testschritte Wechsel in BALANCE Modus, Dr\u00fccken auf \"Back\" Button Wechsel in WITHDRAWAL Modus, Dr\u00fccken auf \"Back\" Button Wechsel in DEPOSIT Modus, Dr\u00fccken auf \"Back\" Button Name \"Clear\" Button Anforderung Bei Dr\u00fccken auf den \"Clear\"-Button soll das Textfeld resettet werden Vorbedingung ATM-Instanz wird erzeugt User loggt sich ein Momentan im MENU Modus Nachbedingung Das Textfeld ist leer Testschritte Beliebiger Input wird in Textfeld eingegeben \"Clear\"-Button wird gedr\u00fcckt Name Ung\u00fcltiger Pin Input Anforderung Bei falscher Pin soll eine LoginFailedException geworfen werden Vorbedingung ATM-Instanz wird erzeugt Ein neuer Account wird erstellt Nachbedingung ATM hat keinen Pin akzeptiert, da Pins aus 4 Ziffern bestehen m\u00fcssen ATM befindet sich noch im LOGIN Modus Testschritte Anmeldungsversuche mit verschieden ung\u00fcltigen Pins Zuerst ein Pin mit Buchstaben, dann ein Pin mit 5 Ziffern und zuletzt ein Pin mit 3 Ziffern Name Neuen Account erstellen Anforderung In der AdminView soll ein neuer Account erstellt werden k\u00f6nnen Vorbedingung ATM-Instanz wird erzeugt Nachbedingung Neuer Account wurde angelegt ATM im ADMIN Modus Testschritte Neuer Admin-Account wird erstellt und der Datenbank hinzugef\u00fcgt Der Admin loggt sich mit seiner Pin ein \u00dcberpr\u00fcfen, ob die L\u00e4nge der Account Liste sich um 1 erh\u00f6ht hat Name Credit und Debit Funktion Anforderung Credit Funktion soll das Guthaben um mitgegebenen Betrag erh\u00f6hen Debit Funktion soll das Guthaben um mitgegebenen Wert verringern Vorbedingung ATM-Instanz wird erzeugt Neuer Account \"a1\" wird angelegt Nachbedingung Guthaben ist gleich hoch wie vor der Durchf\u00fchrung des Tests Testschritte a1.credit(5) wird aufgerufen \u00dcberpr\u00fcfen, ob sich Guthaben um 5 erh\u00f6ht hat a1.debit(5) wird aufgerufen \u00dcberpr\u00fcfen, ob sich Guthaben um 5 verringert hat","title":"Testdokumentation"},{"location":"user-docs/","text":"Benutzerdokumentation coming soon","title":"Benutzerdokumentation"},{"location":"user-docs/#benutzerdokumentation","text":"coming soon","title":"Benutzerdokumentation"},{"location":"codedocs/delta-docs/","text":"Delta-Dokumentation Verbesserungsvorschl\u00e4ge 4-stellige PIN \"Exit\" schlie\u00dft das Programm Verbesserung des Event-Handlings mit Actionlisteners Verbesserung der Klassenstruktur (weniger Klassen?) Verbesserung des UI-Handlings mit JFrame und JPanel Verbesserung der CashDispenser-Funktion Bankautomat in Deutsch Durchgef\u00fchrte Ver\u00e4nderungen \u00c4nderung der PIN auf 4 Stellen \u00dcber das X kann das Programm beendet werden \u00dcber die Abbrechen-Funktion im Menu kann sich der Benutzer abmelden Die internen Klassen, die das Event-Handling \u00fcbernahmen, wurden entfernt Event-Handling der UI Elemente werden mit zwei Interfaces umgesetzt KeypadListener.java kommuniziert die Tastendr\u00fccke ATMListener.java kommuniziert einen Modus-Wechsel und das Bet\u00e4tigen der Enter-Taste Auslagerung der Admin-Ansicht in ein neues Fenster AdminView.java Die Sprache des Programms wurde auf Deutsch umgesetzt Verbessertes Error-Handling Accounts werden mit einer .json Datei gelesen und gespeichert","title":"Delta-Dokumentation"},{"location":"codedocs/delta-docs/#delta-dokumentation","text":"","title":"Delta-Dokumentation"},{"location":"codedocs/delta-docs/#verbesserungsvorschlage","text":"4-stellige PIN \"Exit\" schlie\u00dft das Programm Verbesserung des Event-Handlings mit Actionlisteners Verbesserung der Klassenstruktur (weniger Klassen?) Verbesserung des UI-Handlings mit JFrame und JPanel Verbesserung der CashDispenser-Funktion Bankautomat in Deutsch","title":"Verbesserungsvorschl\u00e4ge"},{"location":"codedocs/delta-docs/#durchgefuhrte-veranderungen","text":"\u00c4nderung der PIN auf 4 Stellen \u00dcber das X kann das Programm beendet werden \u00dcber die Abbrechen-Funktion im Menu kann sich der Benutzer abmelden Die internen Klassen, die das Event-Handling \u00fcbernahmen, wurden entfernt Event-Handling der UI Elemente werden mit zwei Interfaces umgesetzt KeypadListener.java kommuniziert die Tastendr\u00fccke ATMListener.java kommuniziert einen Modus-Wechsel und das Bet\u00e4tigen der Enter-Taste Auslagerung der Admin-Ansicht in ein neues Fenster AdminView.java Die Sprache des Programms wurde auf Deutsch umgesetzt Verbessertes Error-Handling Accounts werden mit einer .json Datei gelesen und gespeichert","title":"Durchgef\u00fchrte Ver\u00e4nderungen"},{"location":"codedocs/is-docs/","text":"Code Ist-Dokumentation Klassen ATMCaseStudy.java Erstellt eine ATM Instanz und startet diese, wenn noch keine vorhanden ATM.java Stellt die Hauptklasse des ATMs dar Initialisiert UI mit Keypad, CashDispenser, DepositSlot und Bankdatabase Es gibt viele unbenutzte konstante int Variablen Sobald Enter bet\u00e4tigt wird, wird die PIN \u00fcberpr\u00fcft (login) Wenn man eingeloggt ist, wird das Men\u00fc angezeigt, wenn man als Admin eingeloggt ist, wird das Admin-Men\u00fc angezeigt Im Men\u00fc kann man nun zwischen Funktionen w\u00e4hlen: balance : Eigenes Guthaben anzeigen withdrawal : Geld abheben, indem man die Scheine einzeln w\u00e4hlt deposit : Geld einzahlen. Geld ist erst verf\u00fcgbar, wenn \u00fcberpr\u00fcft. exit : F\u00fchrt Login erneut aus, \u00f6ffnet allerdings neues Fenster Sollte man als Admin angemeldet sein, \u00f6ffnet sich die Adminoberfl\u00e4che mit diesen Funktionen: Kontostand jedes Nutzers einsehen Zwischen Accounts wecheln Accounts l\u00f6schen Neue Accounts hinzuf\u00fcgen Transaction.java Abstrakte Klasse, die mit einer AccountNummer, Dem Screen-Objekt und dem BankDatabase-Objekt initialisiert wird. BalanceInquiry.java Erbt von Transactions und \u00fcberschreibt die Execute-Funktion Die Execute-Funktion gibt den Kontostand auf dem Screen aus Withdrawal.java Erbt von Transactions und \u00fcberschreibt die Execute-Funktion Die Execute-Funktion zeigt die Buttons zur Scheinauswahl an Die Transaction-Funktion erm\u00f6glicht das abheben von Geld, wenn noch gen\u00fcgend auf dem Konto und im CashDispenser verf\u00fcgbar ist. Man kann nur in 20er Scheinen abheben Deposit.java Erbt von Transactions und \u00fcberschreibt die Execute-Funktion Die Execute-Funktion zeigt UI zum Geldeinzahlen an Beim Geldeinzahlen wird gepr\u00fcft, ob das Geld eingezahlt wurde DepositSlot.java Klasse ist nicht vorhanden. Hier sollte \u00fcberpr\u00fcft werden, ob das Geld vorhanden ist CashDispenser.java Startet mit 500 20$ Scheinen BankDatabase.java Initialisiert alle Accounts Authentifiziert Nutzer anhand der PIN Funktionen um anhand der AccountNumber Daten \u00fcber den Account abzurufen (verf\u00fcgbares Guthaben, etc) Besitzt Funktionen um Guthaben von Accounts abzuziehen oder aufzuladen Fehler: getaccpin funktioniert nicht Funktion um tempor\u00e4r einen Account zu erstellen und dem Account-Array hinzuzuf\u00fcgen Funktion um tempor\u00e4r einen Account zu l\u00f6schen Account.java Besitzt Eigenschaften eines Benutzers Funktion um Pin mit aktuellem Account zu verifizieren Getter und Setter AccountFactory.java Wird nicht verwendet Erbt von Account, initialisiert einen Account Iterator Interface, das zwei Funktionen beinhaltet, die einen Wahrheitswert zur\u00fcckgeben, ob von der aktuellen Position ein n\u00e4chstes oder vorheriges Element existiert Funktion, die ein Objekt zur\u00fcck gibt, anhand einer Position AccountIterator.java Implementiert das Iterator Interface und \u00fcberschreibt dessen Funktionen Screen.java JFrame-Komponente, die Textfelder, Labels und Buttons besitzt Besitzt Funktionen um Nachrichten in der Konsole auszugeben Besitzt Funktionen um UI-Elemente anzuzeigen: Login Men\u00fc Kontostand Geldauszahlung Geldeinzahlung Admin-Ansicht Keypad.java Besitzt unbenutze Scanner-Funktion Besitzt JButtons f\u00fcr ein Tastenfeld mit L\u00f6schen und Enter Funktionen Funktion um ein JPanel mit Buttons zu initialisieren und zur\u00fcckgeben Fehler: Endlos-Schleife userinput()","title":"Ist-Dokumentation"},{"location":"codedocs/is-docs/#code-ist-dokumentation","text":"","title":"Code Ist-Dokumentation"},{"location":"codedocs/is-docs/#klassen","text":"ATMCaseStudy.java Erstellt eine ATM Instanz und startet diese, wenn noch keine vorhanden ATM.java Stellt die Hauptklasse des ATMs dar Initialisiert UI mit Keypad, CashDispenser, DepositSlot und Bankdatabase Es gibt viele unbenutzte konstante int Variablen Sobald Enter bet\u00e4tigt wird, wird die PIN \u00fcberpr\u00fcft (login) Wenn man eingeloggt ist, wird das Men\u00fc angezeigt, wenn man als Admin eingeloggt ist, wird das Admin-Men\u00fc angezeigt Im Men\u00fc kann man nun zwischen Funktionen w\u00e4hlen: balance : Eigenes Guthaben anzeigen withdrawal : Geld abheben, indem man die Scheine einzeln w\u00e4hlt deposit : Geld einzahlen. Geld ist erst verf\u00fcgbar, wenn \u00fcberpr\u00fcft. exit : F\u00fchrt Login erneut aus, \u00f6ffnet allerdings neues Fenster Sollte man als Admin angemeldet sein, \u00f6ffnet sich die Adminoberfl\u00e4che mit diesen Funktionen: Kontostand jedes Nutzers einsehen Zwischen Accounts wecheln Accounts l\u00f6schen Neue Accounts hinzuf\u00fcgen Transaction.java Abstrakte Klasse, die mit einer AccountNummer, Dem Screen-Objekt und dem BankDatabase-Objekt initialisiert wird. BalanceInquiry.java Erbt von Transactions und \u00fcberschreibt die Execute-Funktion Die Execute-Funktion gibt den Kontostand auf dem Screen aus Withdrawal.java Erbt von Transactions und \u00fcberschreibt die Execute-Funktion Die Execute-Funktion zeigt die Buttons zur Scheinauswahl an Die Transaction-Funktion erm\u00f6glicht das abheben von Geld, wenn noch gen\u00fcgend auf dem Konto und im CashDispenser verf\u00fcgbar ist. Man kann nur in 20er Scheinen abheben Deposit.java Erbt von Transactions und \u00fcberschreibt die Execute-Funktion Die Execute-Funktion zeigt UI zum Geldeinzahlen an Beim Geldeinzahlen wird gepr\u00fcft, ob das Geld eingezahlt wurde DepositSlot.java Klasse ist nicht vorhanden. Hier sollte \u00fcberpr\u00fcft werden, ob das Geld vorhanden ist CashDispenser.java Startet mit 500 20$ Scheinen BankDatabase.java Initialisiert alle Accounts Authentifiziert Nutzer anhand der PIN Funktionen um anhand der AccountNumber Daten \u00fcber den Account abzurufen (verf\u00fcgbares Guthaben, etc) Besitzt Funktionen um Guthaben von Accounts abzuziehen oder aufzuladen Fehler: getaccpin funktioniert nicht Funktion um tempor\u00e4r einen Account zu erstellen und dem Account-Array hinzuzuf\u00fcgen Funktion um tempor\u00e4r einen Account zu l\u00f6schen Account.java Besitzt Eigenschaften eines Benutzers Funktion um Pin mit aktuellem Account zu verifizieren Getter und Setter AccountFactory.java Wird nicht verwendet Erbt von Account, initialisiert einen Account Iterator Interface, das zwei Funktionen beinhaltet, die einen Wahrheitswert zur\u00fcckgeben, ob von der aktuellen Position ein n\u00e4chstes oder vorheriges Element existiert Funktion, die ein Objekt zur\u00fcck gibt, anhand einer Position AccountIterator.java Implementiert das Iterator Interface und \u00fcberschreibt dessen Funktionen Screen.java JFrame-Komponente, die Textfelder, Labels und Buttons besitzt Besitzt Funktionen um Nachrichten in der Konsole auszugeben Besitzt Funktionen um UI-Elemente anzuzeigen: Login Men\u00fc Kontostand Geldauszahlung Geldeinzahlung Admin-Ansicht Keypad.java Besitzt unbenutze Scanner-Funktion Besitzt JButtons f\u00fcr ein Tastenfeld mit L\u00f6schen und Enter Funktionen Funktion um ein JPanel mit Buttons zu initialisieren und zur\u00fcckgeben Fehler: Endlos-Schleife userinput()","title":"Klassen"}]}