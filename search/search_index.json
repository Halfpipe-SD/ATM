{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ATM Dokumentation Startseite Abstract Das Ziel dieses Projekts war es, den bestehenden Java-Code eines Geldautomaten zu dokumentieren und zu verbessern. Das Team bestand aus f\u00fcnf Personen, die sich auf ein bestimmtes Thema spezialisiert hatten. Ein GitHub-Repository diente als zentraler Ort f\u00fcr die Dokumentation und den Programmcode. Zus\u00e4tzlich konnten mit Hilfe eines SCRUM-Boards die Aufgaben der Teammitglieder aufgeteilt und deren Fortschritt \u00fcberwacht werden. Das Team beschloss zu Beginn des Projekts, den bestehenden Code zu verwerfen und noch einmal von vorne zu beginnen. Dies f\u00fchrte zu einer neuen Architektur, die nun modularer gestaltet und dadurch leichter erweiterbar war. Details k\u00f6nnen in der Architekturdokumentation nachgelesen werden. Die Dokumentation wurde in Form einer Website realisiert, die unter der Adresse atm.node5.de eingesehen werden kann. Zus\u00e4tzlich steht eine automatisch generierte PDF-Datei zum Download zur Verf\u00fcgung. Das Team Wir sind die Panzerknacker. Mitglied Spezialisierung Michel Franz UX Juri Kaemper Text & QS Christian Lop\u00e9z Programmierung Felix M\u00f6hler Requirements Engineering Julian Thiele UML/Kollab.-Werkzeug, Entwicklungsumgebung","title":"Startseite"},{"location":"#atm-dokumentation-startseite","text":"","title":"ATM Dokumentation Startseite"},{"location":"#abstract","text":"Das Ziel dieses Projekts war es, den bestehenden Java-Code eines Geldautomaten zu dokumentieren und zu verbessern. Das Team bestand aus f\u00fcnf Personen, die sich auf ein bestimmtes Thema spezialisiert hatten. Ein GitHub-Repository diente als zentraler Ort f\u00fcr die Dokumentation und den Programmcode. Zus\u00e4tzlich konnten mit Hilfe eines SCRUM-Boards die Aufgaben der Teammitglieder aufgeteilt und deren Fortschritt \u00fcberwacht werden. Das Team beschloss zu Beginn des Projekts, den bestehenden Code zu verwerfen und noch einmal von vorne zu beginnen. Dies f\u00fchrte zu einer neuen Architektur, die nun modularer gestaltet und dadurch leichter erweiterbar war. Details k\u00f6nnen in der Architekturdokumentation nachgelesen werden. Die Dokumentation wurde in Form einer Website realisiert, die unter der Adresse atm.node5.de eingesehen werden kann. Zus\u00e4tzlich steht eine automatisch generierte PDF-Datei zum Download zur Verf\u00fcgung.","title":"Abstract"},{"location":"#das-team","text":"Wir sind die Panzerknacker. Mitglied Spezialisierung Michel Franz UX Juri Kaemper Text & QS Christian Lop\u00e9z Programmierung Felix M\u00f6hler Requirements Engineering Julian Thiele UML/Kollab.-Werkzeug, Entwicklungsumgebung","title":"Das Team"},{"location":"abnahmeprotokoll/","text":"Abnahmeprotokoll In diesem Absatz finden sie die Abnahmeerkl\u00e4rung zwischen Auftraggeber und Auftragnehmer. Machen sie ein Kreuz zwischen den eckigen Klammern, wenn die Aussage korrekt ist [ X ]. Abnahmeprotokoll Projektname: ATM Dokumentation Projektnummer: 0001 Auftraggeber: Katharina Franz, Technische Hochschule Aschaffenburg Auftragnehmer: Panzerknacker Abnahmeumfang: Gesamtabnahme [ ] Teilabnahme [ ] Projektbeginn: 25.04.2022 Abgabetermin: 20.06.2022 Lieferanhang Best\u00e4tigung Lieferartikel [ ] 1. Anforderungsdokumentation [ ] 2. Architekturdokumentation [ ] 3. Testdokumentation [ ] 4. Abnahmedokumentation [ ] 5. Benutzerdokumentation [ ] 6. Projektdokumentation [ ] 7. Ist-Dokumentation [ ] 8. Delta-Dokumentation Offene Fehler Nr. Fehlerbeschreibung ... ... ... ... Offene Anforderungen Nr. Anforderungsbeschreibung ... ... ... ... Auftraggeber und Auftragnehmer stellen nach der vereinbarten Abnahmeprozedur \u00fcbereinstimmend fest, dass die vertraglich vereinbarten Leistungen im Wesentlichen: [ ] erreicht sind. Offene Punkte, die den vertraglich vorgesehenen Verwendungszweck nur unwesentlich beeinflussen, sind in der beiliegenden Liste der offenen Punkte aufgef\u00fchrt. [ ] nicht erreicht sind. Die Abnahme muss zu den vertraglichen Bedingungen wiederholt werden. Auch nach dem Abschluss des Projektes sind wir mit einem professionellen Service f\u00fcr Ihre Systeme und Software f\u00fcr Sie da und betreuen auf Wunsch Ihr System \u00fcber den gesamten Lebenszyklus. _________________________________________ Auftraggeber/Repr\u00e4sentant, Unterschrift _________________________________________ Ort, Datum _________________________________________ Auftragnehmer, Unterschrift _________________________________________ Ort, Datum","title":"Abnahmeprotokoll"},{"location":"abnahmeprotokoll/#abnahmeprotokoll","text":"In diesem Absatz finden sie die Abnahmeerkl\u00e4rung zwischen Auftraggeber und Auftragnehmer. Machen sie ein Kreuz zwischen den eckigen Klammern, wenn die Aussage korrekt ist [ X ]. Abnahmeprotokoll Projektname: ATM Dokumentation Projektnummer: 0001 Auftraggeber: Katharina Franz, Technische Hochschule Aschaffenburg Auftragnehmer: Panzerknacker Abnahmeumfang: Gesamtabnahme [ ] Teilabnahme [ ] Projektbeginn: 25.04.2022 Abgabetermin: 20.06.2022 Lieferanhang Best\u00e4tigung Lieferartikel [ ] 1. Anforderungsdokumentation [ ] 2. Architekturdokumentation [ ] 3. Testdokumentation [ ] 4. Abnahmedokumentation [ ] 5. Benutzerdokumentation [ ] 6. Projektdokumentation [ ] 7. Ist-Dokumentation [ ] 8. Delta-Dokumentation Offene Fehler Nr. Fehlerbeschreibung ... ... ... ... Offene Anforderungen Nr. Anforderungsbeschreibung ... ... ... ... Auftraggeber und Auftragnehmer stellen nach der vereinbarten Abnahmeprozedur \u00fcbereinstimmend fest, dass die vertraglich vereinbarten Leistungen im Wesentlichen: [ ] erreicht sind. Offene Punkte, die den vertraglich vorgesehenen Verwendungszweck nur unwesentlich beeinflussen, sind in der beiliegenden Liste der offenen Punkte aufgef\u00fchrt. [ ] nicht erreicht sind. Die Abnahme muss zu den vertraglichen Bedingungen wiederholt werden. Auch nach dem Abschluss des Projektes sind wir mit einem professionellen Service f\u00fcr Ihre Systeme und Software f\u00fcr Sie da und betreuen auf Wunsch Ihr System \u00fcber den gesamten Lebenszyklus. _________________________________________ Auftraggeber/Repr\u00e4sentant, Unterschrift _________________________________________ Ort, Datum _________________________________________ Auftragnehmer, Unterschrift _________________________________________ Ort, Datum","title":"Abnahmeprotokoll"},{"location":"acceptance-docs/","text":"Abnahmedokumentation System Under Test System Under Test bezieht sich auf die Validierung des Systems. Das System wird unter verschiedenen Szenarien getestet. Die Anforderungsspezifikationen werden den Testf\u00e4llen zugeordnet, um zu \u00fcberpr\u00fcfen, ob alle Anforderungen erf\u00fcllt sind. Die folgende Tabelle beinhaltet die Testf\u00e4lle und Testergebnisse. F\u00fcr detallierte Testspezifikationen siehe Testdokumentation . Bestanden: Testergebnisse wie erwartet Nicht bestanden: Testergebnisse nicht wie erwartet Testfall Testergebnis Sind Komponenten initialisiert Bestanden Wechsel in BALANCE Modus Bestanden Falscher Input in Men\u00fc Bestanden \"Back\" Button Bestanden \"Clear\" Button Bestanden Ung\u00fcltiger Pin Input Bestanden Neuen Account erstellen Bestanden Credit und Debit Funktion Bestanden Die folgende Tabelle beinhaltet die User Stories und deren Ergebnisse. F\u00fcr detallierte User Stories siehe Anforderungsdokumentation . Implementiert: User Stories erfolgreich implementiert Nicht implementiert: User Stories nicht erfolgreich implementiert Nr. User Stories Testergebnis 1 ...Verschiedene Geldbetr\u00e4ge eingeben... Implementiert 2 ...Sehen, wie viel Geld auf Konto ist... Implementiert 3 ...maximal Debit Betrag pro Tag festlegen... Implementiert 4 ...vierstelligen Pin zu meiner Karte eingeben... Implementiert 5 ...Ziffern meiner Pin \u00e4ndern... Implementiert (Administrator) 6 ...L\u00e4nge meiner Pin \u00e4ndern... Implementiert (Administrator) 7 ...St\u00fcckelung ausw\u00e4hlen... Nicht Implementiert 8 ...in mein Konto einloggen... Implementiert 9 ...gegen Geb\u00fchren Geld abheben... Nicht Implementiert 10 ...vollst\u00e4ndige und detaillierte Dokumentation... Implementiert Bereitstellung zur Abnahme Das Abnahmeprotokoll kann hier als PDF-Datei heruntergeladen werden.","title":"Abnahmedokumentation"},{"location":"acceptance-docs/#abnahmedokumentation","text":"","title":"Abnahmedokumentation"},{"location":"acceptance-docs/#system-under-test","text":"System Under Test bezieht sich auf die Validierung des Systems. Das System wird unter verschiedenen Szenarien getestet. Die Anforderungsspezifikationen werden den Testf\u00e4llen zugeordnet, um zu \u00fcberpr\u00fcfen, ob alle Anforderungen erf\u00fcllt sind. Die folgende Tabelle beinhaltet die Testf\u00e4lle und Testergebnisse. F\u00fcr detallierte Testspezifikationen siehe Testdokumentation . Bestanden: Testergebnisse wie erwartet Nicht bestanden: Testergebnisse nicht wie erwartet Testfall Testergebnis Sind Komponenten initialisiert Bestanden Wechsel in BALANCE Modus Bestanden Falscher Input in Men\u00fc Bestanden \"Back\" Button Bestanden \"Clear\" Button Bestanden Ung\u00fcltiger Pin Input Bestanden Neuen Account erstellen Bestanden Credit und Debit Funktion Bestanden Die folgende Tabelle beinhaltet die User Stories und deren Ergebnisse. F\u00fcr detallierte User Stories siehe Anforderungsdokumentation . Implementiert: User Stories erfolgreich implementiert Nicht implementiert: User Stories nicht erfolgreich implementiert Nr. User Stories Testergebnis 1 ...Verschiedene Geldbetr\u00e4ge eingeben... Implementiert 2 ...Sehen, wie viel Geld auf Konto ist... Implementiert 3 ...maximal Debit Betrag pro Tag festlegen... Implementiert 4 ...vierstelligen Pin zu meiner Karte eingeben... Implementiert 5 ...Ziffern meiner Pin \u00e4ndern... Implementiert (Administrator) 6 ...L\u00e4nge meiner Pin \u00e4ndern... Implementiert (Administrator) 7 ...St\u00fcckelung ausw\u00e4hlen... Nicht Implementiert 8 ...in mein Konto einloggen... Implementiert 9 ...gegen Geb\u00fchren Geld abheben... Nicht Implementiert 10 ...vollst\u00e4ndige und detaillierte Dokumentation... Implementiert","title":"System Under Test"},{"location":"acceptance-docs/#bereitstellung-zur-abnahme","text":"Das Abnahmeprotokoll kann hier als PDF-Datei heruntergeladen werden.","title":"Bereitstellung zur Abnahme"},{"location":"architecture-docs/","text":"Architekturdokumentation Beschreibung der Systemarchitektur Priorisierung der nicht funktionalen Anforderungen Nichtfunktionale Anforderungen werden vielfach als Randbedingungen und Qualit\u00e4tseigenschaften verstanden. Qualit\u00e4tsanforderungen \u00c4nderbarkeit und Wiederverwendbarkeit waren uns besonders wichtig, da wir zu Beginn Schwierigkeiten hatten, uns einen \u00dcberblick \u00fcber den bestehenden Code zu verschaffen. Aus diesem Grund entschieden wir uns, den Code noch einmal von Grund auf neu zu erstellen. Dadurch verbessert sich vor allem die Brauchbarkeit und Wartbarkeit des Codes. Anforderungen an Lieferbestandteile Eine vollst\u00e4ndige Dokumentation in Form eines PDF Dokumentes und die Software bilden die Lieferbestandteile. Anforderungen an die Benutzerschnittstelle Eine weitere wichtige nicht funktionale Anforderung ist die Bedienbarkeit oder Benutzerfreundlichkeit des Programms. Da diese Anwendung f\u00fcr eine sehr gro\u00dfe Menge an Benutzern ausgelegt ist, wurde die Bedienbarkeit und Benutzerfreundlichkeit des Programms auf eine h\u00f6here Priorit\u00e4t gesetzt. So wird gew\u00e4hrleistet, dass Benutzer aller Altersgruppen gut mit der Anwendung interagieren k\u00f6nnen. Architekturprinzipien Nach welchen Kriterien soll das System in Komponenten unterteilt werden? Wie sollen Komponenten strukturiert und verfeinert werden? Das System wurde in verschiedene Komponenten unterteilt, die sich jeweils auf eine bestimmte Aufgabe beziehen, um eine enge Kopplung der Module untereinander zu reduzieren. Der verschachtelte Aufbau der UI Komponenten bildet eine Struktur, die leicht erweitert werden kann. Welche Aspekte sollen in Komponenten zusammengefasst werden? In der ATM.java Klasse werden die \u00c4nderungen von einem Modus in den N\u00e4chsten behandelt. Dem entsprechend wird die Screen.java Klasse angesteuert, um die UI Elemente zu aktualisieren. Die Klasse Screen.java beinhaltet alle Funktionen, die zum \u00c4ndern der UI Elemente ben\u00f6tigt werden. In ihr werden die Klassen Keypad.java und SidePanel.java verwendet. Welche Dienstleistungen sollen Komponenten nach au\u00dfen an ihrer Schnittstelle anbieten? Wie sollen die Komponenten miteinander interagieren? Die Komponente Keypad.java gibt \u00fcber das KeypadListener.java Interface alle Events f\u00fcr Tastendr\u00fccke an die Screen.java Klasse weiter. Die Komponente Screen.java gibt \u00fcber das Interface ATMListener.java Events wie z.B. einen Modus-Wechsel oder das Bet\u00e4tigen der Enter-Taste an die ATM.java Klasse weiter. Schnittstellen Hier werden alle Schnittstellen des Systems beschrieben. UI mit den Java-Swing GUI Bibliotheken KeypadListener.java f\u00fcr Kommunikationsschnittstelle zwischen dem Tastenfeld und dem Bildschirm Objekt ATMListener.java ist die Schnittstelle zum Haupt-ATM-Objekt, in der Aktionen, wie ein Wechsel in einen anderen Modus oder das Bet\u00e4tigen der Enter-Taste behandelt werden Big Picture der Systemarchitektur Der Aufbau der Systemarchitektur ist weitestgehend modular gestaltet und ist hier in einem Klassendiagramm dargestellt. Systementwurf Systemdekomposition Im folgenden Abschnitt werden die einzelnen Komponenten des Systems und ihre Funktionen beschrieben. Das System l\u00e4sst sich haupts\u00e4chlich durch die Bestandteile Guthaben anzeigen , Geld abheben und Geld einzahlen beschreiben. Zus\u00e4tzlich gibt es ein Men\u00fc eine Admin-Ansicht und eine Login , sowie eine Logout Funktion. Vom Men\u00fc aus, ist es einem Benutzer m\u00f6glich alle relevanten Funktionalit\u00e4ten durch das Dr\u00fccken einer Zahl zu erreichen. Die Funktion atmSwitchModeAction() wechselt nun, je nach eingegebener Zahl, in den entsprechenden Modus. Eine weitere wichtige Komponente des Systems ist das Keypad , welches die verschiedenen Kn\u00f6pfe darstellt. Dieses befindet sich immer in der linken H\u00e4lfte des Fensters und hilft dem Nutzer bei der Bedienung des Automaten. Es wird in dem Konstruktor der Klasse Screen.java zusammen mit dem SidePanel initialisiert. Das SidePanel hat, wie das Keypad, eine eigene Klasse. Es befindet sich auf der rechten H\u00e4lfte des Fensters und beinhaltet unter anderem einen \u201eBack-Button\u201c. Mit diesem kann zur\u00fcck in den \u201eMen\u00fc-Modus\u201c gewechselt werden. In dem SidePanel befindet sich au\u00dferdem das Textfeld, in welchem die Benutzereingabe angezeigt wird, sowie ein JLabel. Dieses zeigt, je nach Modus, zum Beispiel das verf\u00fcgbare Geld, oder die verschiedenen Optionen mit entsprechender Eingabe an. Eine weitere Funktionalit\u00e4t ist die Admin-Ansicht . Loggt sich ein Admin ein, \u00f6ffnet sich ein neues Fenster. In diesem k\u00f6nnen die Daten der Benutzer ge\u00e4ndert und anschlie\u00dfend gespeichert werden. Designalternativen und \u2013Entscheidungen Es wurde sich dazu entschieden die einzelnen Funktionalit\u00e4ten mit Hilfe von verschiedenen Modi zu implementieren. Der Bankautomat befindet sich zu jedem Zeitpunkt in einem bestimmten Modus und reagiert, je nach Modus, unterschiedlich auf bestimmte Eingaben. Dieser Ansatz unterscheidet sich von der urspr\u00fcnglichen Version des Automaten. Hier gab es keine Modi und die verschiedenen Funktionen, wie das Geldabheben, wurden von eigenen Klassen \u00fcbernommen. In der alten Version des Bankautomaten, konnte ein Admin mit Hilfe eines Iterators auf die einzelnen Benutzer zugreifen. In dem \u00fcberarbeiteten Modell ist es m\u00f6glich, aus einer Liste von Benutzern den gew\u00fcnschten per Mausklick auszuw\u00e4hlen. Dies erm\u00f6glicht eine einfachere und schnellere Bearbeitung. Zudem wird das Speichern der verschiedenen Benutzer nicht mehr innerhalb einer Java-Klasse \u00fcbernommen, sondern au\u00dferhalb in einer JSON-Datei. Die Benutzerdaten werden mit Hilfe der Klasse BankDatabase.java in diese Datei \u00fcbertragen. Cross-Cutting-Concerns, NFRs Nun werden kurz die Cross-Cutting-Concerns des Systems, sowie der Umgang mit diesen, vorgestellt. Ein Benutzer soll in jedem Modus eine Eingabe t\u00e4tigen k\u00f6nnen. Daher wurde das Keypad und ein entsprechendes Textfeld so implementiert, dass diese Komponenten stets sichtbar und verf\u00fcgbar sind. Andere Komponenten werden teilweise unsichtbar gemacht, da diese nicht in jedem Modus gebraucht werden. Ein weiterer Cross-Cutting-Concern ist das Geben von passendem Feedback an den Benutzer. Hier soll dem Benutzer, unabh\u00e4ngig von dem aktuellen Modus, stets mitgeteilt werden, wenn er eine ung\u00fcltige Eingabe get\u00e4tigt hat. F\u00fcr diese Art von Fehlermeldungen wurde im untersten Bereich des Fensters ein Textfeld angelegt, welches die jeweilige Nachricht in roter Farbe anzeigt. Au\u00dferdem ist die Validierung des Inputs bei einem Bankautomaten \u00e4u\u00dferst wichtig. Deshalb werden die Eingaben stets auf Richtigkeit \u00fcberpr\u00fcft. So wird beispielsweise sichergestellt, dass das eingezahlte Geld keinen Maximalwert \u00fcberschreitet. Ebenso muss sichergestellt werden, dass ein Benutzer nicht mehr Geld abheben kann, als gerade f\u00fcr ihn verf\u00fcgbar ist. Bez\u00fcglich der Nicht-funktionalen-Anforderungen wurde auf eine hohe Performance und Bedienbarkeit geachtet. Dem Benutzer wird das Bedienen des Automaten durch ein intuitives Interface leichtgemacht. Die Wartezeiten sind kurz, da die Funktionen zur Berechnung von \u00dcberweisungen und Kontost\u00e4nden eine geringe Laufzeit aufweisen. Mensch-Maschine-Schnittstelle Anforderungen an die Mensch-Maschine-Schnittstelle Die Mensch-Maschine-Schnittstelle, oder auch Benutzerschnittstelle, bezieht sich auf die Kommunikation zwischen einem Nutzer (Mensch) und dem Geldautomaten (Maschine). Der Mensch gibt mit seinen Aktoren (H\u00e4nden) eine Eingabe-Information an die Peripherieeinheiten des Geldautomaten, welche eine digitale Information an die Recheneinheit des Geldautomaten weiterleiten. Die von der Recheneinheit entgegengenommene Information wird mittels der aufgespielten Software verarbeitet und eine Ausgabe-Information wird erzeugt. Die Recheneinheit steuert digital die Peripherieeinheiten des Geldautomaten an, welche eine optische (Bildschirm-Ausgabe) und mechanische Ausgabe Information (Geldauszahlung) erzeugen. Die R\u00fcckgabe-Informationen werden vom Menschen visuell (Bildschirm-Information) und haptisch (Annahme des ausgezahlten Geldes) verarbeitet. Ein-/Ausgabe Mensch Schnittstelle Hardware Schnittstelle Software Schnittstelle Eingabe H\u00e4nde Encrypting PIN Pad Tastenabfrage Augen ID-Kartenleser, Softkeys oder Touchscreen Touchbildschirm Abfrage Ausgabe H\u00e4nde Bildschirm Grafikausgabe Augen Auszahlmodul Peripherie Ansteuerung Gestaltungsprinzipien Gestaltungsprinzipien bzw. Gastaltungsgesetze je nach Literatur, helfen ein ansprechendes und verst\u00e4ndliches Design zu erstellen. Es sind psychologische Ans\u00e4tze, wie das menschliche Gehirn visuelle Informationen wahrnimmt und ordnet. Folgende Prinzipien wurden in diesem Projekt beachtet: Benutzeransicht Prinzip der \u00c4hnlichkeit Elemente die \u00e4hnliche bzw. gleiche Funktionen haben wurden gleich gestaltet. Wie zum Beispiel die Eingabe Tastenfeld Null bis Neun, sie haben alle das gleichen Design. Die Tasten \u201cEnter\u201d, \u201cClear\u201d und \u201cOK\u201d haben das gleiche Design aber f\u00fchren unterschiedliche Funktionen aus. Prinzip der N\u00e4he Elemente die die gleichen Funktionen ausf\u00fchren, oder helfen, dass diese Funktion ausgef\u00fchrt werden kann, wurden r\u00e4umlich nah platziert. Wie zum Beispiel die Tasten Null bis Neun, sie wurden nah an einander, links im Display platziert. Auch die Kn\u00f6pfe \u201cEnter\u201d und \u201cClear\u201d wurden im Tastenfeld platziert, da sie die Eingabe best\u00e4tigen oder l\u00f6schen. Prinzip der Pr\u00e4gnanz Interaktionselemente wurden hervorgehoben. Wie im Falle der Eingabekn\u00f6pfe Null bis Neuen. Aber auch das Ausgabefenster wurde quadratisch und mit wei\u00dfem Hintergrund gestaltet. Prinzip der gemeinsamen Region Eingabe Elemente werden links vom Display platziert und das Ausgabe-Fenster rechts vom Display. Die Regionen sind mit einer unterschiedlichen Hintergrundfarbe optisch getrennt Prinzip der Erfahrung Elemente werden so gestaltet wie sie sich zuvor in der Praxis schon bewiesen haben, oder es aus kultureller Sicht angenommen wurde. In unserem Fall wurde kulturell standardisiert das nummerische Tastenfelder in einer Matrix 3x4 angeordnet. Admin-Ansicht Prinzip der \u00c4hnlichkeit Elemente die \u00e4hnliche bzw. gleiche Funktionen haben wurden gleich gestaltet. Wie zum Beispiel die Buttons \u201eNeuer Account\u201c, \u201eAccount l\u00f6schen\u201c, \u201eSpeichern\u201c, die alle ben\u00f6tigt werden um Accountmanagement auszu\u00fcben, wurden gleich gestaltet. Die Eingabefelder zum Erstellen neuer Accounts wurden ebenfalls gleich gestaltet. Prinzip der N\u00e4he Elemente, die die gleichen Funktionen ausf\u00fchren oder dazu helfen, dass diese Funktion ausgef\u00fchrt werden kann wurden r\u00e4umlich nah platziert. Die Buttons f\u00fcr das Accountmanagement wurden alle unten platziert. Die Eingabefelder zum Erstellen eines neuen Accounts wurden alle rechts am Bildschirmrand zusammengefasst und die Auswahl eines Kunden an der linken Seite des Bildschirmrandes. Prinzip der Pr\u00e4gnanz Interaktionselemente wurden hervorgehoben. Die Buttons wurden bl\u00e4ulich gef\u00e4rbt und umrandet, um sie hervorzuheben. Ebenso wurde bei der Auswahl eines Kunden, die Auswahl bl\u00e4ulich hinterlegt um zu markieren, welcher Kunde ausgew\u00e4hlt wurde. Zus\u00e4tzlich wurden die Eingabefelder alle mit wei\u00dfem Hintergrund versehen. Prinzip der gemeinsamen Region Die Auswahl der Kunden befindet sich rechts am Bildschirm und die dazugeh\u00f6rigen Daten werden links im Bildschirm angezeigt. Die verf\u00fcgbaren Optionen wurden unten am Bildschirmrand platziert. Styleguide Im Folgenden wurden Design-Mockups erstellt, welche die Ansichten f\u00fcr den Benutzer und den Administrator repr\u00e4sentieren. Mockup f\u00fcr die Standardansicht des Automaten Mockup f\u00fcr die Administratoransicht des Automaten Interatkionsmodellierung Im Folgenden wurde die Interaktion zwischen den Benutzern und dem Geldautomaten modelliert und in einem UML-Aktivit\u00e4tsdiagramm dargestellt. Admin-Ansicht Benutzeransicht","title":"Architekturdokumentation"},{"location":"architecture-docs/#architekturdokumentation","text":"","title":"Architekturdokumentation"},{"location":"architecture-docs/#beschreibung-der-systemarchitektur","text":"","title":"Beschreibung der Systemarchitektur"},{"location":"architecture-docs/#priorisierung-der-nicht-funktionalen-anforderungen","text":"Nichtfunktionale Anforderungen werden vielfach als Randbedingungen und Qualit\u00e4tseigenschaften verstanden.","title":"Priorisierung der nicht funktionalen Anforderungen"},{"location":"architecture-docs/#qualitatsanforderungen","text":"\u00c4nderbarkeit und Wiederverwendbarkeit waren uns besonders wichtig, da wir zu Beginn Schwierigkeiten hatten, uns einen \u00dcberblick \u00fcber den bestehenden Code zu verschaffen. Aus diesem Grund entschieden wir uns, den Code noch einmal von Grund auf neu zu erstellen. Dadurch verbessert sich vor allem die Brauchbarkeit und Wartbarkeit des Codes.","title":"Qualit\u00e4tsanforderungen"},{"location":"architecture-docs/#anforderungen-an-lieferbestandteile","text":"Eine vollst\u00e4ndige Dokumentation in Form eines PDF Dokumentes und die Software bilden die Lieferbestandteile.","title":"Anforderungen an Lieferbestandteile"},{"location":"architecture-docs/#anforderungen-an-die-benutzerschnittstelle","text":"Eine weitere wichtige nicht funktionale Anforderung ist die Bedienbarkeit oder Benutzerfreundlichkeit des Programms. Da diese Anwendung f\u00fcr eine sehr gro\u00dfe Menge an Benutzern ausgelegt ist, wurde die Bedienbarkeit und Benutzerfreundlichkeit des Programms auf eine h\u00f6here Priorit\u00e4t gesetzt. So wird gew\u00e4hrleistet, dass Benutzer aller Altersgruppen gut mit der Anwendung interagieren k\u00f6nnen.","title":"Anforderungen an die Benutzerschnittstelle"},{"location":"architecture-docs/#architekturprinzipien","text":"Nach welchen Kriterien soll das System in Komponenten unterteilt werden? Wie sollen Komponenten strukturiert und verfeinert werden? Das System wurde in verschiedene Komponenten unterteilt, die sich jeweils auf eine bestimmte Aufgabe beziehen, um eine enge Kopplung der Module untereinander zu reduzieren. Der verschachtelte Aufbau der UI Komponenten bildet eine Struktur, die leicht erweitert werden kann. Welche Aspekte sollen in Komponenten zusammengefasst werden? In der ATM.java Klasse werden die \u00c4nderungen von einem Modus in den N\u00e4chsten behandelt. Dem entsprechend wird die Screen.java Klasse angesteuert, um die UI Elemente zu aktualisieren. Die Klasse Screen.java beinhaltet alle Funktionen, die zum \u00c4ndern der UI Elemente ben\u00f6tigt werden. In ihr werden die Klassen Keypad.java und SidePanel.java verwendet. Welche Dienstleistungen sollen Komponenten nach au\u00dfen an ihrer Schnittstelle anbieten? Wie sollen die Komponenten miteinander interagieren? Die Komponente Keypad.java gibt \u00fcber das KeypadListener.java Interface alle Events f\u00fcr Tastendr\u00fccke an die Screen.java Klasse weiter. Die Komponente Screen.java gibt \u00fcber das Interface ATMListener.java Events wie z.B. einen Modus-Wechsel oder das Bet\u00e4tigen der Enter-Taste an die ATM.java Klasse weiter.","title":"Architekturprinzipien"},{"location":"architecture-docs/#schnittstellen","text":"Hier werden alle Schnittstellen des Systems beschrieben. UI mit den Java-Swing GUI Bibliotheken KeypadListener.java f\u00fcr Kommunikationsschnittstelle zwischen dem Tastenfeld und dem Bildschirm Objekt ATMListener.java ist die Schnittstelle zum Haupt-ATM-Objekt, in der Aktionen, wie ein Wechsel in einen anderen Modus oder das Bet\u00e4tigen der Enter-Taste behandelt werden","title":"Schnittstellen"},{"location":"architecture-docs/#big-picture-der-systemarchitektur","text":"Der Aufbau der Systemarchitektur ist weitestgehend modular gestaltet und ist hier in einem Klassendiagramm dargestellt.","title":"Big Picture der Systemarchitektur"},{"location":"architecture-docs/#systementwurf","text":"","title":"Systementwurf"},{"location":"architecture-docs/#systemdekomposition","text":"Im folgenden Abschnitt werden die einzelnen Komponenten des Systems und ihre Funktionen beschrieben. Das System l\u00e4sst sich haupts\u00e4chlich durch die Bestandteile Guthaben anzeigen , Geld abheben und Geld einzahlen beschreiben. Zus\u00e4tzlich gibt es ein Men\u00fc eine Admin-Ansicht und eine Login , sowie eine Logout Funktion. Vom Men\u00fc aus, ist es einem Benutzer m\u00f6glich alle relevanten Funktionalit\u00e4ten durch das Dr\u00fccken einer Zahl zu erreichen. Die Funktion atmSwitchModeAction() wechselt nun, je nach eingegebener Zahl, in den entsprechenden Modus. Eine weitere wichtige Komponente des Systems ist das Keypad , welches die verschiedenen Kn\u00f6pfe darstellt. Dieses befindet sich immer in der linken H\u00e4lfte des Fensters und hilft dem Nutzer bei der Bedienung des Automaten. Es wird in dem Konstruktor der Klasse Screen.java zusammen mit dem SidePanel initialisiert. Das SidePanel hat, wie das Keypad, eine eigene Klasse. Es befindet sich auf der rechten H\u00e4lfte des Fensters und beinhaltet unter anderem einen \u201eBack-Button\u201c. Mit diesem kann zur\u00fcck in den \u201eMen\u00fc-Modus\u201c gewechselt werden. In dem SidePanel befindet sich au\u00dferdem das Textfeld, in welchem die Benutzereingabe angezeigt wird, sowie ein JLabel. Dieses zeigt, je nach Modus, zum Beispiel das verf\u00fcgbare Geld, oder die verschiedenen Optionen mit entsprechender Eingabe an. Eine weitere Funktionalit\u00e4t ist die Admin-Ansicht . Loggt sich ein Admin ein, \u00f6ffnet sich ein neues Fenster. In diesem k\u00f6nnen die Daten der Benutzer ge\u00e4ndert und anschlie\u00dfend gespeichert werden.","title":"Systemdekomposition"},{"location":"architecture-docs/#designalternativen-und-entscheidungen","text":"Es wurde sich dazu entschieden die einzelnen Funktionalit\u00e4ten mit Hilfe von verschiedenen Modi zu implementieren. Der Bankautomat befindet sich zu jedem Zeitpunkt in einem bestimmten Modus und reagiert, je nach Modus, unterschiedlich auf bestimmte Eingaben. Dieser Ansatz unterscheidet sich von der urspr\u00fcnglichen Version des Automaten. Hier gab es keine Modi und die verschiedenen Funktionen, wie das Geldabheben, wurden von eigenen Klassen \u00fcbernommen. In der alten Version des Bankautomaten, konnte ein Admin mit Hilfe eines Iterators auf die einzelnen Benutzer zugreifen. In dem \u00fcberarbeiteten Modell ist es m\u00f6glich, aus einer Liste von Benutzern den gew\u00fcnschten per Mausklick auszuw\u00e4hlen. Dies erm\u00f6glicht eine einfachere und schnellere Bearbeitung. Zudem wird das Speichern der verschiedenen Benutzer nicht mehr innerhalb einer Java-Klasse \u00fcbernommen, sondern au\u00dferhalb in einer JSON-Datei. Die Benutzerdaten werden mit Hilfe der Klasse BankDatabase.java in diese Datei \u00fcbertragen.","title":"Designalternativen und \u2013Entscheidungen"},{"location":"architecture-docs/#cross-cutting-concerns-nfrs","text":"Nun werden kurz die Cross-Cutting-Concerns des Systems, sowie der Umgang mit diesen, vorgestellt. Ein Benutzer soll in jedem Modus eine Eingabe t\u00e4tigen k\u00f6nnen. Daher wurde das Keypad und ein entsprechendes Textfeld so implementiert, dass diese Komponenten stets sichtbar und verf\u00fcgbar sind. Andere Komponenten werden teilweise unsichtbar gemacht, da diese nicht in jedem Modus gebraucht werden. Ein weiterer Cross-Cutting-Concern ist das Geben von passendem Feedback an den Benutzer. Hier soll dem Benutzer, unabh\u00e4ngig von dem aktuellen Modus, stets mitgeteilt werden, wenn er eine ung\u00fcltige Eingabe get\u00e4tigt hat. F\u00fcr diese Art von Fehlermeldungen wurde im untersten Bereich des Fensters ein Textfeld angelegt, welches die jeweilige Nachricht in roter Farbe anzeigt. Au\u00dferdem ist die Validierung des Inputs bei einem Bankautomaten \u00e4u\u00dferst wichtig. Deshalb werden die Eingaben stets auf Richtigkeit \u00fcberpr\u00fcft. So wird beispielsweise sichergestellt, dass das eingezahlte Geld keinen Maximalwert \u00fcberschreitet. Ebenso muss sichergestellt werden, dass ein Benutzer nicht mehr Geld abheben kann, als gerade f\u00fcr ihn verf\u00fcgbar ist. Bez\u00fcglich der Nicht-funktionalen-Anforderungen wurde auf eine hohe Performance und Bedienbarkeit geachtet. Dem Benutzer wird das Bedienen des Automaten durch ein intuitives Interface leichtgemacht. Die Wartezeiten sind kurz, da die Funktionen zur Berechnung von \u00dcberweisungen und Kontost\u00e4nden eine geringe Laufzeit aufweisen.","title":"Cross-Cutting-Concerns, NFRs"},{"location":"architecture-docs/#mensch-maschine-schnittstelle","text":"","title":"Mensch-Maschine-Schnittstelle"},{"location":"architecture-docs/#anforderungen-an-die-mensch-maschine-schnittstelle","text":"Die Mensch-Maschine-Schnittstelle, oder auch Benutzerschnittstelle, bezieht sich auf die Kommunikation zwischen einem Nutzer (Mensch) und dem Geldautomaten (Maschine). Der Mensch gibt mit seinen Aktoren (H\u00e4nden) eine Eingabe-Information an die Peripherieeinheiten des Geldautomaten, welche eine digitale Information an die Recheneinheit des Geldautomaten weiterleiten. Die von der Recheneinheit entgegengenommene Information wird mittels der aufgespielten Software verarbeitet und eine Ausgabe-Information wird erzeugt. Die Recheneinheit steuert digital die Peripherieeinheiten des Geldautomaten an, welche eine optische (Bildschirm-Ausgabe) und mechanische Ausgabe Information (Geldauszahlung) erzeugen. Die R\u00fcckgabe-Informationen werden vom Menschen visuell (Bildschirm-Information) und haptisch (Annahme des ausgezahlten Geldes) verarbeitet. Ein-/Ausgabe Mensch Schnittstelle Hardware Schnittstelle Software Schnittstelle Eingabe H\u00e4nde Encrypting PIN Pad Tastenabfrage Augen ID-Kartenleser, Softkeys oder Touchscreen Touchbildschirm Abfrage Ausgabe H\u00e4nde Bildschirm Grafikausgabe Augen Auszahlmodul Peripherie Ansteuerung","title":"Anforderungen an die Mensch-Maschine-Schnittstelle"},{"location":"architecture-docs/#gestaltungsprinzipien","text":"Gestaltungsprinzipien bzw. Gastaltungsgesetze je nach Literatur, helfen ein ansprechendes und verst\u00e4ndliches Design zu erstellen. Es sind psychologische Ans\u00e4tze, wie das menschliche Gehirn visuelle Informationen wahrnimmt und ordnet. Folgende Prinzipien wurden in diesem Projekt beachtet:","title":"Gestaltungsprinzipien"},{"location":"architecture-docs/#benutzeransicht","text":"Prinzip der \u00c4hnlichkeit Elemente die \u00e4hnliche bzw. gleiche Funktionen haben wurden gleich gestaltet. Wie zum Beispiel die Eingabe Tastenfeld Null bis Neun, sie haben alle das gleichen Design. Die Tasten \u201cEnter\u201d, \u201cClear\u201d und \u201cOK\u201d haben das gleiche Design aber f\u00fchren unterschiedliche Funktionen aus. Prinzip der N\u00e4he Elemente die die gleichen Funktionen ausf\u00fchren, oder helfen, dass diese Funktion ausgef\u00fchrt werden kann, wurden r\u00e4umlich nah platziert. Wie zum Beispiel die Tasten Null bis Neun, sie wurden nah an einander, links im Display platziert. Auch die Kn\u00f6pfe \u201cEnter\u201d und \u201cClear\u201d wurden im Tastenfeld platziert, da sie die Eingabe best\u00e4tigen oder l\u00f6schen. Prinzip der Pr\u00e4gnanz Interaktionselemente wurden hervorgehoben. Wie im Falle der Eingabekn\u00f6pfe Null bis Neuen. Aber auch das Ausgabefenster wurde quadratisch und mit wei\u00dfem Hintergrund gestaltet. Prinzip der gemeinsamen Region Eingabe Elemente werden links vom Display platziert und das Ausgabe-Fenster rechts vom Display. Die Regionen sind mit einer unterschiedlichen Hintergrundfarbe optisch getrennt Prinzip der Erfahrung Elemente werden so gestaltet wie sie sich zuvor in der Praxis schon bewiesen haben, oder es aus kultureller Sicht angenommen wurde. In unserem Fall wurde kulturell standardisiert das nummerische Tastenfelder in einer Matrix 3x4 angeordnet.","title":"Benutzeransicht"},{"location":"architecture-docs/#admin-ansicht","text":"Prinzip der \u00c4hnlichkeit Elemente die \u00e4hnliche bzw. gleiche Funktionen haben wurden gleich gestaltet. Wie zum Beispiel die Buttons \u201eNeuer Account\u201c, \u201eAccount l\u00f6schen\u201c, \u201eSpeichern\u201c, die alle ben\u00f6tigt werden um Accountmanagement auszu\u00fcben, wurden gleich gestaltet. Die Eingabefelder zum Erstellen neuer Accounts wurden ebenfalls gleich gestaltet. Prinzip der N\u00e4he Elemente, die die gleichen Funktionen ausf\u00fchren oder dazu helfen, dass diese Funktion ausgef\u00fchrt werden kann wurden r\u00e4umlich nah platziert. Die Buttons f\u00fcr das Accountmanagement wurden alle unten platziert. Die Eingabefelder zum Erstellen eines neuen Accounts wurden alle rechts am Bildschirmrand zusammengefasst und die Auswahl eines Kunden an der linken Seite des Bildschirmrandes. Prinzip der Pr\u00e4gnanz Interaktionselemente wurden hervorgehoben. Die Buttons wurden bl\u00e4ulich gef\u00e4rbt und umrandet, um sie hervorzuheben. Ebenso wurde bei der Auswahl eines Kunden, die Auswahl bl\u00e4ulich hinterlegt um zu markieren, welcher Kunde ausgew\u00e4hlt wurde. Zus\u00e4tzlich wurden die Eingabefelder alle mit wei\u00dfem Hintergrund versehen. Prinzip der gemeinsamen Region Die Auswahl der Kunden befindet sich rechts am Bildschirm und die dazugeh\u00f6rigen Daten werden links im Bildschirm angezeigt. Die verf\u00fcgbaren Optionen wurden unten am Bildschirmrand platziert.","title":"Admin-Ansicht"},{"location":"architecture-docs/#styleguide","text":"Im Folgenden wurden Design-Mockups erstellt, welche die Ansichten f\u00fcr den Benutzer und den Administrator repr\u00e4sentieren.","title":"Styleguide"},{"location":"architecture-docs/#mockup-fur-die-standardansicht-des-automaten","text":"","title":"Mockup f\u00fcr die Standardansicht des Automaten"},{"location":"architecture-docs/#mockup-fur-die-administratoransicht-des-automaten","text":"","title":"Mockup f\u00fcr die Administratoransicht des Automaten"},{"location":"architecture-docs/#interatkionsmodellierung","text":"Im Folgenden wurde die Interaktion zwischen den Benutzern und dem Geldautomaten modelliert und in einem UML-Aktivit\u00e4tsdiagramm dargestellt.","title":"Interatkionsmodellierung"},{"location":"architecture-docs/#admin-ansicht_1","text":"","title":"Admin-Ansicht"},{"location":"architecture-docs/#benutzeransicht_1","text":"","title":"Benutzeransicht"},{"location":"project-docs/","text":"Projektdokumentation Lessons Learned Regelm\u00e4\u00dfige Meetings halfen uns die Aufgaben so zu verteilen, dass wir den Terminplan einhalten konnten und deshalb einen konstanten Fortschritt erzielten. Durch dieses Projekt lernten wir, besser mit Git und den Softwareentwicklungs-Tools von GitHub umzugehen. Dazu z\u00e4hlen das Projektboard, Issues und Actions. Mapping zu individuellen Leistungen Die Aufgaben wurden mit Github-Issues verwaltet. Diese k\u00f6nnen hier eingesehen werden. Zus\u00e4tzlich sind hier noch einmal die Abschnitte der Dokumentation mit Hochzahlen versehen, die zeigen, wer die Autoren sind: Christan And\u00e9s 1 , Mich\u00e9l Franz 2 , Juri Kaemper 3 , Felix M\u00f6hler 4 , Julian Thiele 5 01 Anforderungsdokumentation Produktvision und Produktziele 4 Rollen und Personas 5 User Stories 4 Aufgaben 1 Begriffslexikon 2 Mengenger\u00fcst 3 Use Cases 3 02 Architekturdokumentation Beschreibung der Systemarchitektur 5 Priorisierung der nicht funktionalen Anforderungen Architekturprinzipien Schnittstellen Big Picture der Systemarchitektur Systementwurf 3 Systemdekomposition Designalternativen und \u2013Entscheidungen Cross-Cutting-Concerns, NFRs Mensch Maschine Schnittstelle Anforderungen an die MM-Schnittstelle 4 Gestaltungsprinzipien und Style-Guide 2 Interaktionsmodellierung 2 03 Testdokumentation 3 Testspezifikation Testprotokoll 04 Abnahmedokumentation 1 SUT - System Under Test BZA \u2013 Bereitstellung zur Abnahme Vorlage Abnahmeprotokoll inkl. vereinbarter Use-Cases 05 Benutzerdokumentation 2 Benutzerhandbuch oder ein der Zielgruppe entsprechendes Format (Video, Tutorial, etc.) \u2013 mit Kundin abstimmen 06 Projektdokumentation 4 Lessons Learned Mapping zur individuellen Leistung 07 Codedokumentation 5 Delta-Codedokumentation Ist-Dokumentation","title":"Projektdokumentation"},{"location":"project-docs/#projektdokumentation","text":"","title":"Projektdokumentation"},{"location":"project-docs/#lessons-learned","text":"Regelm\u00e4\u00dfige Meetings halfen uns die Aufgaben so zu verteilen, dass wir den Terminplan einhalten konnten und deshalb einen konstanten Fortschritt erzielten. Durch dieses Projekt lernten wir, besser mit Git und den Softwareentwicklungs-Tools von GitHub umzugehen. Dazu z\u00e4hlen das Projektboard, Issues und Actions.","title":"Lessons Learned"},{"location":"project-docs/#mapping-zu-individuellen-leistungen","text":"Die Aufgaben wurden mit Github-Issues verwaltet. Diese k\u00f6nnen hier eingesehen werden. Zus\u00e4tzlich sind hier noch einmal die Abschnitte der Dokumentation mit Hochzahlen versehen, die zeigen, wer die Autoren sind: Christan And\u00e9s 1 , Mich\u00e9l Franz 2 , Juri Kaemper 3 , Felix M\u00f6hler 4 , Julian Thiele 5","title":"Mapping zu individuellen Leistungen"},{"location":"project-docs/#01-anforderungsdokumentation","text":"Produktvision und Produktziele 4 Rollen und Personas 5 User Stories 4 Aufgaben 1 Begriffslexikon 2 Mengenger\u00fcst 3 Use Cases 3","title":"01 Anforderungsdokumentation"},{"location":"project-docs/#02-architekturdokumentation","text":"Beschreibung der Systemarchitektur 5 Priorisierung der nicht funktionalen Anforderungen Architekturprinzipien Schnittstellen Big Picture der Systemarchitektur Systementwurf 3 Systemdekomposition Designalternativen und \u2013Entscheidungen Cross-Cutting-Concerns, NFRs Mensch Maschine Schnittstelle Anforderungen an die MM-Schnittstelle 4 Gestaltungsprinzipien und Style-Guide 2 Interaktionsmodellierung 2","title":"02 Architekturdokumentation"},{"location":"project-docs/#03-testdokumentation3","text":"Testspezifikation Testprotokoll","title":"03 Testdokumentation3"},{"location":"project-docs/#04-abnahmedokumentation1","text":"SUT - System Under Test BZA \u2013 Bereitstellung zur Abnahme Vorlage Abnahmeprotokoll inkl. vereinbarter Use-Cases","title":"04 Abnahmedokumentation1"},{"location":"project-docs/#05-benutzerdokumentation2","text":"Benutzerhandbuch oder ein der Zielgruppe entsprechendes Format (Video, Tutorial, etc.) \u2013 mit Kundin abstimmen","title":"05 Benutzerdokumentation2"},{"location":"project-docs/#06-projektdokumentation4","text":"Lessons Learned Mapping zur individuellen Leistung","title":"06 Projektdokumentation4"},{"location":"project-docs/#07-codedokumentation5","text":"Delta-Codedokumentation Ist-Dokumentation","title":"07 Codedokumentation5"},{"location":"requirements-docs/","text":"Anforderungsdokumentation Produktvision und Produktziele Produktvision Eine regionale Bank hat unser externes Software-Entwicklerteam f\u00fcr einen Auftrag eingestellt. Bei dem uns \u00fcbertragenem Projekt handelt es sich um die fehlerhafte Software einer ATM (Automated Teller Machine) zu deutsch Bankautomat. Der bereits existente Programmcode wurde von einem externen Unternehmen entwickelt, so dass der Kunde kein Expertenwissen zum Programm verf\u00fcgt. Au\u00dferdem fehlt auch die Dokumentation vollst\u00e4ndig. Um dem Bankunternehmen nun die Verwendung des Systems zu erm\u00f6glichen, muss das Programm komplett \u00fcberarbeitet werden, dar\u00fcber hinaus soll eine detaillierte Dokumentation (vollst\u00e4ndig in deutsch) f\u00fcr die Bank erstellt werden. Das fehlerfreie Programm mit den bereits integrierten Features und einer strukturierten Dokumentation ist unser Basisfaktor. Das Programm ist f\u00fcr die Bankautomaten der Bank in Deutschland vorgesehen. Die Dokumentation soll die Entwicklung sowie die Funktionen der Software zusammenfassen und f\u00fcr den zust\u00e4ndigen Mitarbeiter verst\u00e4ndlich machen. Produktziele Die Aufgabe unseres Teams ist es, den bereits vorhandenen Code so zu \u00fcberarbeiten, dass dieser voll funktionsf\u00e4hig ist und eine sichere Laufzeit gew\u00e4hrleistet werden kann. Zur Entwicklung der Software ist eine vollst\u00e4ndig deutsche Dokumentation vorgesehen mit Anforderungs -, Architektur -, Test -, Abnahme -, Benutzer -, Projekt -, und Codedokumentation . Rollen und Personas Rollen Hier werden die Rollen beschrieben, denen ein Benutzer angeh\u00f6ren kann. Rollen Beschreibung Benutzer Die Benutzer sind Kunden der Bank, die den Geldautomaten zur Verf\u00fcgung stellt Administrator Administratoren des Bankautomatensystems, die Verwaltungsrechte \u00fcber alle Benutzer besitzen Personas Personas veranschaulichen typische Vertreter Ihrer Zielgruppe. Gertrude Gabel Rolle Benutzer Alter 65 Geschlecht weiblich T\u00e4tigkeit Rentnerin Familienstand verheiratet Bildung Mittelschule Computerkenntnisse Keine Interessen und Hobbys Wandern, Kaffee trinken Einstellung zum Produkt \"Eine tolle Maschine, tut was sie soll\" W\u00fcnsche Einfache Bedienung, wenig zum Merken Peter Lustig Rolle Benutzer Alter 38 Geschlecht m\u00e4nnlich T\u00e4tigkeit Handwerker Familienstand verheiratet Bildung Realschule Computerkenntnisse Grundkenntnisse Interessen und Hobbys Autos, Actionfilme, Fahrradfahren Einstellung zum Produkt \"Hoffentlich werden die neuen Geldautomaten besser\" W\u00fcnsche N\u00fctzliche Funktionen, Schnelle Bedienbarkeit Andy Auman Rolle Administrator Alter 29 Geschlecht m\u00e4nnlich T\u00e4tigkeit Systemadministrator Familienstand ledig Bildung Abitur Computerkenntnisse Fachkenntnisse Interessen und Hobbys Programmierung, Netzwerke, Gaming Einstellung zum Produkt \"\" W\u00fcnsche Viele Funktionen, Wenig Konfigurationsaufwand Mathias Jung Rolle Benutzer Alter 19 Geschlecht m\u00e4nnlich T\u00e4tigkeit Student Familienstand ledig Bildung Abitur Computerkenntnisse Grundkenntnisse Interessen und Hobbys BWL / Wirtschaft Einstellung zum Produkt \"\" W\u00fcnsche Schnelle und einfache Transaktionen User Stories User Stories sind W\u00fcnsche an eine Software, die aus Sicht des Endbenutzers verfasst wurden. Als [Rolle] m\u00f6chte ich [Ziel/Wunsch] , um [Nutzen] Als Benutzer m\u00f6chte ich verschiedene Geldbetr\u00e4ge eingeben , um diese abzuheben Als Benutzer m\u00f6chte ich sehen, wie viel Geld auf meinem Konto ist, um zu wissen, wie viel ich noch abheben kann Als Benutzer m\u00f6chte ich einen maximal Debit Betrag pro Tag festlegen k\u00f6nnen, um bei Diebstahl den Verlust zu minimieren Als Benutzer m\u00f6chte ich eine vierstellige Pin zu meiner Karte eingeben m\u00fcssen, um Gelddiebstahl von meinem Konto zu vermeiden Als Benutzer m\u00f6chte ich die Ziffern meiner Pin \u00e4ndern k\u00f6nnen, um sie mir besser merken zu k\u00f6nnen Als Benutzer m\u00f6chte ich die L\u00e4nge meiner Pin \u00e4ndern k\u00f6nnen, um die Sicherheit zu verbessern Als Benutzer m\u00f6chte ich eine St\u00fcckelung ausw\u00e4hlen k\u00f6nnen, um gew\u00fcnschte Scheine zu erhalten Als Benutzer m\u00f6chte ich mich in mein Konto einloggen k\u00f6nnen, um get\u00e4tigte Transaktionen zu sehen Als Mitglied einer anderen Bank m\u00f6chte ich gegen Geb\u00fchren Geld abheben k\u00f6nnen, um \u00f6rtlich flexibel zu sein Als Administrator der Bank m\u00f6chte ich eine vollst\u00e4ndige und detaillierte Dokumentation , um im Fehlerfall schnell handeln zu k\u00f6nnen Aufgaben Auflistung aller Aufgaben dieses Projektes. Anfertigen einer Ist-Dokumentation des Codes Funktionen aus User Stories implementieren Codeverbesserungen in Delta-Dokumentation beschreiben Anfertigen einer Anforderungsdokumentation Anfertigen einer Systemdokumentation Anfertigen einer Testdokumentation Anfertigen einer Abnahmedokumentation Anfertigen einer Benutzerdokumentation Anfertigen einer Projektdokumentation Begriffslexikon Hier werden wichtige fachspezifische Begriffe aufgelistet, die in diesem Projekt verwendet werden. Begriff Bedeutung Cash Dispenser Bargeld im ATM-Dispenser Deposit Slot Geldfach zum Ein- und Auszahlen Balance Ist-Saldo auf einem Account Withdrawal Geld abheben Account Pin Geheimpin eines Accounts (unique) Account number Nummer eines Accounts (unique) Credit Gutschrift Debit Lastschrift UI Benutzeroberfl\u00e4che GUI Grafische Benutzeroberfl\u00e4che JUnit Java Bibliothek zum Testen JSwing Grafisches Toolkit f\u00fcr Java ATM Geldautomat (Automated Teller Machine) Mockup Digitales Modell einer Anwendung Mengenger\u00fcst Das Mengenger\u00fcst beschreibt quantitativ die Komponenten eines Projektes. Bezeichnung Beschreibung Menge Einheit Pin Stellenanzahl der Pin 4 Stellen Geldautomaten Anzahl Geldautomaten in Aschaffenburg 43 St\u00fcck Debit Maximale Auszahlung pro Tag 1000 Euro Nutzer Maximale Nutzer gleichzeitig 1 Person Nutzer Maximal registrierte Nutzer >1000 Person Transaktion Maximale Transaktion pro Minute ~100 Transaktion Use Cases In diesem Anwendungsfalldiagramm wird das nach au\u00dfen sichtbare Verhalten des Systems aus Sicht der Nutzer beschrieben.","title":"Anforderungsdokumentation"},{"location":"requirements-docs/#anforderungsdokumentation","text":"","title":"Anforderungsdokumentation"},{"location":"requirements-docs/#produktvision-und-produktziele","text":"","title":"Produktvision und Produktziele"},{"location":"requirements-docs/#produktvision","text":"Eine regionale Bank hat unser externes Software-Entwicklerteam f\u00fcr einen Auftrag eingestellt. Bei dem uns \u00fcbertragenem Projekt handelt es sich um die fehlerhafte Software einer ATM (Automated Teller Machine) zu deutsch Bankautomat. Der bereits existente Programmcode wurde von einem externen Unternehmen entwickelt, so dass der Kunde kein Expertenwissen zum Programm verf\u00fcgt. Au\u00dferdem fehlt auch die Dokumentation vollst\u00e4ndig. Um dem Bankunternehmen nun die Verwendung des Systems zu erm\u00f6glichen, muss das Programm komplett \u00fcberarbeitet werden, dar\u00fcber hinaus soll eine detaillierte Dokumentation (vollst\u00e4ndig in deutsch) f\u00fcr die Bank erstellt werden. Das fehlerfreie Programm mit den bereits integrierten Features und einer strukturierten Dokumentation ist unser Basisfaktor. Das Programm ist f\u00fcr die Bankautomaten der Bank in Deutschland vorgesehen. Die Dokumentation soll die Entwicklung sowie die Funktionen der Software zusammenfassen und f\u00fcr den zust\u00e4ndigen Mitarbeiter verst\u00e4ndlich machen.","title":"Produktvision"},{"location":"requirements-docs/#produktziele","text":"Die Aufgabe unseres Teams ist es, den bereits vorhandenen Code so zu \u00fcberarbeiten, dass dieser voll funktionsf\u00e4hig ist und eine sichere Laufzeit gew\u00e4hrleistet werden kann. Zur Entwicklung der Software ist eine vollst\u00e4ndig deutsche Dokumentation vorgesehen mit Anforderungs -, Architektur -, Test -, Abnahme -, Benutzer -, Projekt -, und Codedokumentation .","title":"Produktziele"},{"location":"requirements-docs/#rollen-und-personas","text":"","title":"Rollen und Personas"},{"location":"requirements-docs/#rollen","text":"Hier werden die Rollen beschrieben, denen ein Benutzer angeh\u00f6ren kann. Rollen Beschreibung Benutzer Die Benutzer sind Kunden der Bank, die den Geldautomaten zur Verf\u00fcgung stellt Administrator Administratoren des Bankautomatensystems, die Verwaltungsrechte \u00fcber alle Benutzer besitzen","title":"Rollen"},{"location":"requirements-docs/#personas","text":"Personas veranschaulichen typische Vertreter Ihrer Zielgruppe. Gertrude Gabel Rolle Benutzer Alter 65 Geschlecht weiblich T\u00e4tigkeit Rentnerin Familienstand verheiratet Bildung Mittelschule Computerkenntnisse Keine Interessen und Hobbys Wandern, Kaffee trinken Einstellung zum Produkt \"Eine tolle Maschine, tut was sie soll\" W\u00fcnsche Einfache Bedienung, wenig zum Merken Peter Lustig Rolle Benutzer Alter 38 Geschlecht m\u00e4nnlich T\u00e4tigkeit Handwerker Familienstand verheiratet Bildung Realschule Computerkenntnisse Grundkenntnisse Interessen und Hobbys Autos, Actionfilme, Fahrradfahren Einstellung zum Produkt \"Hoffentlich werden die neuen Geldautomaten besser\" W\u00fcnsche N\u00fctzliche Funktionen, Schnelle Bedienbarkeit Andy Auman Rolle Administrator Alter 29 Geschlecht m\u00e4nnlich T\u00e4tigkeit Systemadministrator Familienstand ledig Bildung Abitur Computerkenntnisse Fachkenntnisse Interessen und Hobbys Programmierung, Netzwerke, Gaming Einstellung zum Produkt \"\" W\u00fcnsche Viele Funktionen, Wenig Konfigurationsaufwand Mathias Jung Rolle Benutzer Alter 19 Geschlecht m\u00e4nnlich T\u00e4tigkeit Student Familienstand ledig Bildung Abitur Computerkenntnisse Grundkenntnisse Interessen und Hobbys BWL / Wirtschaft Einstellung zum Produkt \"\" W\u00fcnsche Schnelle und einfache Transaktionen","title":"Personas"},{"location":"requirements-docs/#user-stories","text":"User Stories sind W\u00fcnsche an eine Software, die aus Sicht des Endbenutzers verfasst wurden. Als [Rolle] m\u00f6chte ich [Ziel/Wunsch] , um [Nutzen] Als Benutzer m\u00f6chte ich verschiedene Geldbetr\u00e4ge eingeben , um diese abzuheben Als Benutzer m\u00f6chte ich sehen, wie viel Geld auf meinem Konto ist, um zu wissen, wie viel ich noch abheben kann Als Benutzer m\u00f6chte ich einen maximal Debit Betrag pro Tag festlegen k\u00f6nnen, um bei Diebstahl den Verlust zu minimieren Als Benutzer m\u00f6chte ich eine vierstellige Pin zu meiner Karte eingeben m\u00fcssen, um Gelddiebstahl von meinem Konto zu vermeiden Als Benutzer m\u00f6chte ich die Ziffern meiner Pin \u00e4ndern k\u00f6nnen, um sie mir besser merken zu k\u00f6nnen Als Benutzer m\u00f6chte ich die L\u00e4nge meiner Pin \u00e4ndern k\u00f6nnen, um die Sicherheit zu verbessern Als Benutzer m\u00f6chte ich eine St\u00fcckelung ausw\u00e4hlen k\u00f6nnen, um gew\u00fcnschte Scheine zu erhalten Als Benutzer m\u00f6chte ich mich in mein Konto einloggen k\u00f6nnen, um get\u00e4tigte Transaktionen zu sehen Als Mitglied einer anderen Bank m\u00f6chte ich gegen Geb\u00fchren Geld abheben k\u00f6nnen, um \u00f6rtlich flexibel zu sein Als Administrator der Bank m\u00f6chte ich eine vollst\u00e4ndige und detaillierte Dokumentation , um im Fehlerfall schnell handeln zu k\u00f6nnen","title":"User Stories"},{"location":"requirements-docs/#aufgaben","text":"Auflistung aller Aufgaben dieses Projektes. Anfertigen einer Ist-Dokumentation des Codes Funktionen aus User Stories implementieren Codeverbesserungen in Delta-Dokumentation beschreiben Anfertigen einer Anforderungsdokumentation Anfertigen einer Systemdokumentation Anfertigen einer Testdokumentation Anfertigen einer Abnahmedokumentation Anfertigen einer Benutzerdokumentation Anfertigen einer Projektdokumentation","title":"Aufgaben"},{"location":"requirements-docs/#begriffslexikon","text":"Hier werden wichtige fachspezifische Begriffe aufgelistet, die in diesem Projekt verwendet werden. Begriff Bedeutung Cash Dispenser Bargeld im ATM-Dispenser Deposit Slot Geldfach zum Ein- und Auszahlen Balance Ist-Saldo auf einem Account Withdrawal Geld abheben Account Pin Geheimpin eines Accounts (unique) Account number Nummer eines Accounts (unique) Credit Gutschrift Debit Lastschrift UI Benutzeroberfl\u00e4che GUI Grafische Benutzeroberfl\u00e4che JUnit Java Bibliothek zum Testen JSwing Grafisches Toolkit f\u00fcr Java ATM Geldautomat (Automated Teller Machine) Mockup Digitales Modell einer Anwendung","title":"Begriffslexikon"},{"location":"requirements-docs/#mengengerust","text":"Das Mengenger\u00fcst beschreibt quantitativ die Komponenten eines Projektes. Bezeichnung Beschreibung Menge Einheit Pin Stellenanzahl der Pin 4 Stellen Geldautomaten Anzahl Geldautomaten in Aschaffenburg 43 St\u00fcck Debit Maximale Auszahlung pro Tag 1000 Euro Nutzer Maximale Nutzer gleichzeitig 1 Person Nutzer Maximal registrierte Nutzer >1000 Person Transaktion Maximale Transaktion pro Minute ~100 Transaktion","title":"Mengenger\u00fcst"},{"location":"requirements-docs/#use-cases","text":"In diesem Anwendungsfalldiagramm wird das nach au\u00dfen sichtbare Verhalten des Systems aus Sicht der Nutzer beschrieben.","title":"Use Cases"},{"location":"test-docs/","text":"Testdokumentation In der folgenden Dokumentation werden die f\u00fcr das Projekt durchgef\u00fchrten Test beschrieben. Diese sind entweder manuell oder mit Hilfe von JUnit ausgef\u00fchrt worden. Name Sind Komponenten initialisiert Anforderung Die ATM-Instanz soll einen screen und eine bankDatabase haben Vorbedingung ATM-Instanz ist erzeugt Nachbedingung Screen und bankDatabase des ATM sind initialisiert Testschritte Stelle sicher, dass Komponenten nicht null sind Name Wechsel in BALANCE Modus Anforderung Mit dem Input \"1\" soll in den BALANCE Modus gewechselt werden Vorbedingung ATM-Instanz ist erzeugt User ist eingeloggt Momentan im MENU Modus Nachbedingung Guthaben wird angezeigt ATM im BALANCE Modus Testschritte Funktion atm.atmEnterAction() wird mit Input \"1\" aufgerufen Name Falscher Input in Men\u00fc Anforderung Bei falschem Input soll ATM im selben Modus bleiben Vorbedingung ATM-Instanz ist erzeugt User ist eingeloggt Momentan im MENU Modus Nachbedingung ATM gibt Fehlermeldung, resettet das Textfeld und bleibt im selben Modus Testschritte Funktion atm.atmEnterAction() wird mit falschem Input aufgerufen Name \"Back\" Button Anforderung Der \"Back\" Button, soll den Modus zu MENU wechseln Vorbedingung ATM-Instanz ist erzeugt User ist eingeloggt Momentan im MENU Modus Nachbedingung ATM befindet sich wieder im MENU Modus Testschritte Wechsel in BALANCE Modus, Dr\u00fccken auf \"Back\" Button Wechsel in WITHDRAWAL Modus, Dr\u00fccken auf \"Back\" Button Wechsel in DEPOSIT Modus, Dr\u00fccken auf \"Back\" Button Name \"Clear\" Button Anforderung Bei Dr\u00fccken auf den \"Clear\"-Button soll das Textfeld resettet werden Vorbedingung ATM-Instanz ist erzeugt User ist eingeloggt Momentan im MENU Modus Nachbedingung Das Textfeld ist leer Testschritte Beliebiger Input wird in Textfeld eingegeben \"Clear\"-Button wird gedr\u00fcckt Name Ung\u00fcltiger Pin Input Anforderung Bei falscher Pin soll eine LoginFailedException geworfen werden Vorbedingung ATM-Instanz ist erzeugt Ein neuer Account ist angelegt Nachbedingung ATM hat keinen Pin akzeptiert, da Pins aus 4 Ziffern bestehen m\u00fcssen ATM befindet sich noch im LOGIN Modus Testschritte Anmeldungsversuche mit verschieden ung\u00fcltigen Pins Zuerst ein Pin mit Buchstaben, dann ein Pin mit 5 Ziffern und zuletzt ein Pin mit 3 Ziffern Name Neuen Account erstellen Anforderung In der AdminView soll ein neuer Account erstellt werden k\u00f6nnen Vorbedingung ATM-Instanz ist erzeugt Nachbedingung Neuer Account wurde angelegt ATM im ADMIN Modus Testschritte Neuer Admin-Account wird erstellt und der Datenbank hinzugef\u00fcgt Der Admin loggt sich mit seiner Pin ein \u00dcberpr\u00fcfen, ob die L\u00e4nge der Account Liste sich um 1 erh\u00f6ht hat Name Credit und Debit Funktion Anforderung Credit Funktion soll das Guthaben um mitgegebenen Betrag erh\u00f6hen Debit Funktion soll das Guthaben um mitgegebenen Wert verringern Vorbedingung ATM-Instanz ist erzeugt Neuer Account \"a1\" ist angelegt Nachbedingung Guthaben ist gleich hoch wie vor der Durchf\u00fchrung des Tests Testschritte a1.credit(5) wird aufgerufen \u00dcberpr\u00fcfen, ob sich Guthaben um 5 erh\u00f6ht hat a1.debit(5) wird aufgerufen \u00dcberpr\u00fcfen, ob sich Guthaben um 5 verringert hat Name Geldschein-Menge \u00fcberpr\u00fcfen Anforderung Nach dem Einzahlen von Geld soll sich die Menge der jeweiligen Euro-Scheine entsprechend ver\u00e4ndern Vorbedingung Ein Objekt der Klasse CashDispenser ist erzeugt Nachbedingung Anzahl der verschiedenen Geldscheine hat sich erh\u00f6ht Testschritte Es werden 875\u20ac in den Automaten gezahlt \u00dcberpr\u00fcfen, dass acht 100\u20ac-Scheine, ein 50\u20ac-Schein, ein 20\u20ac-Schein und ein 5\u20ac-Schein mehr im CashDispenser sind Name Ung\u00fcltiger Einzahlungs-Betrag Anforderung Es soll eine InvalidTransactionException geworfen werden, wenn versucht wird einen ung\u00fcltigen Betrag einzuzahlen Vorbedingung Ein Objekt der Klasse CashDispenser ist erzeugt Nachbedingung Es wurde 3 mal eine InvalidTransactionException geworfen Testschritte Es wird \u00fcberpr\u00fcft, ob bei folgenden ung\u00fcltigen Eingaben eine Exception geworfen wird: - Eingabe: -4\u20ac (negativ) - Eingabe: 7\u20ac (nicht durch 5 teilbar) - Eingabe: 1100\u20ac (mehr als 1000\u20ac auf einmal) Zus\u00e4tzlich zu den automatisch durchlaufenen Unit-Tests wurden noch einige Tests manuell durchgef\u00fchrt. Jegliche Funktionen der Software wurden durch das das direkte Benutzen dieser \u00fcberpr\u00fcft. Der gesamte Prozess, vom Login, zum Geldabheben, bis zum Logout wurde mehrmals mit verschiedenen m\u00f6glichen Inputs und Reihenfolgen ausgef\u00fchrt. Hierbei wurde auch auf die korrekte Anordnung der UI-Komponenten geachtet. Die verschiedenen Textbeschreibungen und \u00dcberschriften wurden ebenfalls auf ihre Richtigkeit \u00fcberpr\u00fcft. Zusammenfassend l\u00e4sst sich sagen, dass alle geschriebenen Tests erfolgreich durchlaufen wurden und die Software wie erw\u00fcnscht funktioniert. Es wurden keine Fehler gefunden, welche die Abnahme der Software verhindern w\u00fcrden. Nat\u00fcrlich kann nicht ausgeschlossen werden, dass kleinere Fehler beim Benutzen der Software auftreten k\u00f6nnten, jedoch sind beim Nutzen und Testen der Software keine solche Fehler aufgefallen.","title":"Testdokumentation"},{"location":"test-docs/#testdokumentation","text":"In der folgenden Dokumentation werden die f\u00fcr das Projekt durchgef\u00fchrten Test beschrieben. Diese sind entweder manuell oder mit Hilfe von JUnit ausgef\u00fchrt worden. Name Sind Komponenten initialisiert Anforderung Die ATM-Instanz soll einen screen und eine bankDatabase haben Vorbedingung ATM-Instanz ist erzeugt Nachbedingung Screen und bankDatabase des ATM sind initialisiert Testschritte Stelle sicher, dass Komponenten nicht null sind Name Wechsel in BALANCE Modus Anforderung Mit dem Input \"1\" soll in den BALANCE Modus gewechselt werden Vorbedingung ATM-Instanz ist erzeugt User ist eingeloggt Momentan im MENU Modus Nachbedingung Guthaben wird angezeigt ATM im BALANCE Modus Testschritte Funktion atm.atmEnterAction() wird mit Input \"1\" aufgerufen Name Falscher Input in Men\u00fc Anforderung Bei falschem Input soll ATM im selben Modus bleiben Vorbedingung ATM-Instanz ist erzeugt User ist eingeloggt Momentan im MENU Modus Nachbedingung ATM gibt Fehlermeldung, resettet das Textfeld und bleibt im selben Modus Testschritte Funktion atm.atmEnterAction() wird mit falschem Input aufgerufen Name \"Back\" Button Anforderung Der \"Back\" Button, soll den Modus zu MENU wechseln Vorbedingung ATM-Instanz ist erzeugt User ist eingeloggt Momentan im MENU Modus Nachbedingung ATM befindet sich wieder im MENU Modus Testschritte Wechsel in BALANCE Modus, Dr\u00fccken auf \"Back\" Button Wechsel in WITHDRAWAL Modus, Dr\u00fccken auf \"Back\" Button Wechsel in DEPOSIT Modus, Dr\u00fccken auf \"Back\" Button Name \"Clear\" Button Anforderung Bei Dr\u00fccken auf den \"Clear\"-Button soll das Textfeld resettet werden Vorbedingung ATM-Instanz ist erzeugt User ist eingeloggt Momentan im MENU Modus Nachbedingung Das Textfeld ist leer Testschritte Beliebiger Input wird in Textfeld eingegeben \"Clear\"-Button wird gedr\u00fcckt Name Ung\u00fcltiger Pin Input Anforderung Bei falscher Pin soll eine LoginFailedException geworfen werden Vorbedingung ATM-Instanz ist erzeugt Ein neuer Account ist angelegt Nachbedingung ATM hat keinen Pin akzeptiert, da Pins aus 4 Ziffern bestehen m\u00fcssen ATM befindet sich noch im LOGIN Modus Testschritte Anmeldungsversuche mit verschieden ung\u00fcltigen Pins Zuerst ein Pin mit Buchstaben, dann ein Pin mit 5 Ziffern und zuletzt ein Pin mit 3 Ziffern Name Neuen Account erstellen Anforderung In der AdminView soll ein neuer Account erstellt werden k\u00f6nnen Vorbedingung ATM-Instanz ist erzeugt Nachbedingung Neuer Account wurde angelegt ATM im ADMIN Modus Testschritte Neuer Admin-Account wird erstellt und der Datenbank hinzugef\u00fcgt Der Admin loggt sich mit seiner Pin ein \u00dcberpr\u00fcfen, ob die L\u00e4nge der Account Liste sich um 1 erh\u00f6ht hat Name Credit und Debit Funktion Anforderung Credit Funktion soll das Guthaben um mitgegebenen Betrag erh\u00f6hen Debit Funktion soll das Guthaben um mitgegebenen Wert verringern Vorbedingung ATM-Instanz ist erzeugt Neuer Account \"a1\" ist angelegt Nachbedingung Guthaben ist gleich hoch wie vor der Durchf\u00fchrung des Tests Testschritte a1.credit(5) wird aufgerufen \u00dcberpr\u00fcfen, ob sich Guthaben um 5 erh\u00f6ht hat a1.debit(5) wird aufgerufen \u00dcberpr\u00fcfen, ob sich Guthaben um 5 verringert hat Name Geldschein-Menge \u00fcberpr\u00fcfen Anforderung Nach dem Einzahlen von Geld soll sich die Menge der jeweiligen Euro-Scheine entsprechend ver\u00e4ndern Vorbedingung Ein Objekt der Klasse CashDispenser ist erzeugt Nachbedingung Anzahl der verschiedenen Geldscheine hat sich erh\u00f6ht Testschritte Es werden 875\u20ac in den Automaten gezahlt \u00dcberpr\u00fcfen, dass acht 100\u20ac-Scheine, ein 50\u20ac-Schein, ein 20\u20ac-Schein und ein 5\u20ac-Schein mehr im CashDispenser sind Name Ung\u00fcltiger Einzahlungs-Betrag Anforderung Es soll eine InvalidTransactionException geworfen werden, wenn versucht wird einen ung\u00fcltigen Betrag einzuzahlen Vorbedingung Ein Objekt der Klasse CashDispenser ist erzeugt Nachbedingung Es wurde 3 mal eine InvalidTransactionException geworfen Testschritte Es wird \u00fcberpr\u00fcft, ob bei folgenden ung\u00fcltigen Eingaben eine Exception geworfen wird: - Eingabe: -4\u20ac (negativ) - Eingabe: 7\u20ac (nicht durch 5 teilbar) - Eingabe: 1100\u20ac (mehr als 1000\u20ac auf einmal) Zus\u00e4tzlich zu den automatisch durchlaufenen Unit-Tests wurden noch einige Tests manuell durchgef\u00fchrt. Jegliche Funktionen der Software wurden durch das das direkte Benutzen dieser \u00fcberpr\u00fcft. Der gesamte Prozess, vom Login, zum Geldabheben, bis zum Logout wurde mehrmals mit verschiedenen m\u00f6glichen Inputs und Reihenfolgen ausgef\u00fchrt. Hierbei wurde auch auf die korrekte Anordnung der UI-Komponenten geachtet. Die verschiedenen Textbeschreibungen und \u00dcberschriften wurden ebenfalls auf ihre Richtigkeit \u00fcberpr\u00fcft. Zusammenfassend l\u00e4sst sich sagen, dass alle geschriebenen Tests erfolgreich durchlaufen wurden und die Software wie erw\u00fcnscht funktioniert. Es wurden keine Fehler gefunden, welche die Abnahme der Software verhindern w\u00fcrden. Nat\u00fcrlich kann nicht ausgeschlossen werden, dass kleinere Fehler beim Benutzen der Software auftreten k\u00f6nnten, jedoch sind beim Nutzen und Testen der Software keine solche Fehler aufgefallen.","title":"Testdokumentation"},{"location":"user-docs/","text":"Benutzerdokumentation Im Folgenden wird eine Anleitung zur Benutzung des ATM, mit einem Kunden, zu verschiedenen Optionen dargestellt. Kunde Geld abheben Der Benutzer inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Men\u00fc an. Der Benutzer w\u00e4hlt \"Geld abheben\" aus. Atm zeigt das verf\u00fcgbare Guthaben an und erfordert die Eingabe des Betrags. Der Benutzer gibt den gew\u00fcnschten Betrag ein und dr\u00fcckt \"Enter\". ATM fordert Best\u00e4tigung. Der Benutzer best\u00e4tigt das Geld abzubuchen. ATM Best\u00e4tigt die Auszahlung. Der Benutzer dr\u00fcck auf \"OK\". ATM zeigt das Men\u00fc an. Geld einzahlen Der Benutzer inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Men\u00fc an. Der Benutzer w\u00e4hlt \u201eGeld einzahlen\u201c . ATM zeigt das verf\u00fcgbare Guthaben an und erfordert die Eingabe des Betrags. Der Benutzer gibt den gew\u00fcnschten Betrag ein und dr\u00fcckt \"Enter\". ATM fordert Best\u00e4tigung. Benutzer dr\u00fcckt \u201eJa\u201c. ATM validiert die Eingabe. Bei erfolgreicher Pr\u00fcfung wird der Betrag dem Bankkonto gutgeschrieben und der Informationsbildschirm wird angezeigt. Benutzer dr\u00fcckt \u201eJA\u201c. ATM s validiert die Eingabe. Bei nicht erfolgreicher Pr\u00fcfung wird ein Informationsbildschirm angezeigt. Benutzer dr\u00fcckt \"OK\" . ATM zeigt das Men\u00fc an. Kontostand anzeigen Der Benutzer inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Men\u00fc an. Benutzer w\u00e4hlt \u201eKontostand anzeigen\u201c. ATM zeigt Bildschirm mit Kontostand an. Benutzer dr\u00fcckt \u201eAbbrechen\u201c. ATM zeigt das Men\u00fc an. Logout Der Benutzer inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Men\u00fc an. Der Benutzer w\u00e4hlt \u201eAbbrechen\u201c. ATM zeigt Willkommens Bildschirm an. Im Folgenden wird eine Anleitung zur Benutzung des ATM, mit einem Administrator, zu verschiedenen Optionen dargestellt. Administrator Account hinzuf\u00fcgen Administrator inseriert seine Karte. ATM zeigt das Authentifizierungsmen\u00fc an. Administrator gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Admin-Men\u00fc an. Administrator dr\u00fcckt \u201eNeuer Account\u201c. ATM erzeugt ein neues Konto. Administrator gibt Accountdaten ein und dr\u00fcckt \"Speichern\". ATM Zeigt Informationsbildschirm an. Administrator dr\u00fcckt \"OK\". ATM zeigt das Admin-Men\u00fc an. Account l\u00f6schen Administrator inseriert seine Karte. ATM zeigt das Authentifizierungsmen\u00fc an. Administrator gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Admin-Men\u00fc an. Administrator w\u00e4hlt einen account aus und dr\u00fcckt \"L\u00f6schen\". ATM erfordert best\u00e4tigung. Adminstrator best\u00e4tigt das L\u00f6schen. ATM l\u00f6scht das Konto und Zeigt Informationsbildschirm an. Administrator dr\u00fcckt \"OK\". ATM zeigt das Admin-Men\u00fc an. Account bearbeiten Administrator inseriert seine Karte. ATM zeigt das Authentifizierungsmen\u00fc an. Administrator gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Admin-Men\u00fc an. Administrator w\u00e4hlt einen Account aus, gibt die gew\u00fcnschte \u00e4nderung ein und dr\u00fcckt \"Speichern\". ATM zeigt Informationsbildschirm an. Administrator dr\u00fcckt \"OK\". ATM zeigt das Admin-Men\u00fc an.","title":"Benutzerdokumentation"},{"location":"user-docs/#benutzerdokumentation","text":"Im Folgenden wird eine Anleitung zur Benutzung des ATM, mit einem Kunden, zu verschiedenen Optionen dargestellt.","title":"Benutzerdokumentation"},{"location":"user-docs/#kunde","text":"","title":"Kunde"},{"location":"user-docs/#geld-abheben","text":"Der Benutzer inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Men\u00fc an. Der Benutzer w\u00e4hlt \"Geld abheben\" aus. Atm zeigt das verf\u00fcgbare Guthaben an und erfordert die Eingabe des Betrags. Der Benutzer gibt den gew\u00fcnschten Betrag ein und dr\u00fcckt \"Enter\". ATM fordert Best\u00e4tigung. Der Benutzer best\u00e4tigt das Geld abzubuchen. ATM Best\u00e4tigt die Auszahlung. Der Benutzer dr\u00fcck auf \"OK\". ATM zeigt das Men\u00fc an.","title":"Geld abheben"},{"location":"user-docs/#geld-einzahlen","text":"Der Benutzer inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Men\u00fc an. Der Benutzer w\u00e4hlt \u201eGeld einzahlen\u201c . ATM zeigt das verf\u00fcgbare Guthaben an und erfordert die Eingabe des Betrags. Der Benutzer gibt den gew\u00fcnschten Betrag ein und dr\u00fcckt \"Enter\". ATM fordert Best\u00e4tigung. Benutzer dr\u00fcckt \u201eJa\u201c. ATM validiert die Eingabe. Bei erfolgreicher Pr\u00fcfung wird der Betrag dem Bankkonto gutgeschrieben und der Informationsbildschirm wird angezeigt. Benutzer dr\u00fcckt \u201eJA\u201c. ATM s validiert die Eingabe. Bei nicht erfolgreicher Pr\u00fcfung wird ein Informationsbildschirm angezeigt. Benutzer dr\u00fcckt \"OK\" . ATM zeigt das Men\u00fc an.","title":"Geld einzahlen"},{"location":"user-docs/#kontostand-anzeigen","text":"Der Benutzer inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Men\u00fc an. Benutzer w\u00e4hlt \u201eKontostand anzeigen\u201c. ATM zeigt Bildschirm mit Kontostand an. Benutzer dr\u00fcckt \u201eAbbrechen\u201c. ATM zeigt das Men\u00fc an.","title":"Kontostand anzeigen"},{"location":"user-docs/#logout","text":"Der Benutzer inseriert seine Bankkarte. ATM zeigt das Authentifizierungsmen\u00fc an. Der Benutzer gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Men\u00fc an. Der Benutzer w\u00e4hlt \u201eAbbrechen\u201c. ATM zeigt Willkommens Bildschirm an. Im Folgenden wird eine Anleitung zur Benutzung des ATM, mit einem Administrator, zu verschiedenen Optionen dargestellt.","title":"Logout"},{"location":"user-docs/#administrator","text":"","title":"Administrator"},{"location":"user-docs/#account-hinzufugen","text":"Administrator inseriert seine Karte. ATM zeigt das Authentifizierungsmen\u00fc an. Administrator gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Admin-Men\u00fc an. Administrator dr\u00fcckt \u201eNeuer Account\u201c. ATM erzeugt ein neues Konto. Administrator gibt Accountdaten ein und dr\u00fcckt \"Speichern\". ATM Zeigt Informationsbildschirm an. Administrator dr\u00fcckt \"OK\". ATM zeigt das Admin-Men\u00fc an.","title":"Account hinzuf\u00fcgen"},{"location":"user-docs/#account-loschen","text":"Administrator inseriert seine Karte. ATM zeigt das Authentifizierungsmen\u00fc an. Administrator gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Admin-Men\u00fc an. Administrator w\u00e4hlt einen account aus und dr\u00fcckt \"L\u00f6schen\". ATM erfordert best\u00e4tigung. Adminstrator best\u00e4tigt das L\u00f6schen. ATM l\u00f6scht das Konto und Zeigt Informationsbildschirm an. Administrator dr\u00fcckt \"OK\". ATM zeigt das Admin-Men\u00fc an.","title":"Account l\u00f6schen"},{"location":"user-docs/#account-bearbeiten","text":"Administrator inseriert seine Karte. ATM zeigt das Authentifizierungsmen\u00fc an. Administrator gibt seine PIN ein, um sich zu authentifizieren. ATM Zeigt das Admin-Men\u00fc an. Administrator w\u00e4hlt einen Account aus, gibt die gew\u00fcnschte \u00e4nderung ein und dr\u00fcckt \"Speichern\". ATM zeigt Informationsbildschirm an. Administrator dr\u00fcckt \"OK\". ATM zeigt das Admin-Men\u00fc an.","title":"Account bearbeiten"},{"location":"codedocs/delta-docs/","text":"Delta-Dokumentation Durchgef\u00fchrte Ver\u00e4nderungen \u00c4nderung der PIN auf 4 Stellen \u00dcber das X kann das Programm beendet werden \u00dcber die Abbrechen-Funktion im Menu kann sich der Benutzer abmelden Die internen Klassen, die das Event-Handling \u00fcbernahmen, wurden entfernt Event-Handling der UI Elemente werden mit zwei Interfaces umgesetzt KeypadListener.java kommuniziert die Tastendr\u00fccke ATMListener.java kommuniziert einen Modus-Wechsel und das Bet\u00e4tigen der Enter-Taste Auslagerung der Admin-Ansicht in ein neues Fenster AdminView.java Die Sprache des Programms wurde auf Deutsch ge\u00e4ndert Verbessertes Error-Handling Accounts werden mit einer .json Datei gelesen und gespeichert Geld wird in Scheinen aus dem Vorrat im Cash Dispenser ausgegeben Es werden die h\u00f6chstm\u00f6glichen Scheine gew\u00e4hlt","title":"Delta-Dokumentation"},{"location":"codedocs/delta-docs/#delta-dokumentation","text":"","title":"Delta-Dokumentation"},{"location":"codedocs/delta-docs/#durchgefuhrte-veranderungen","text":"\u00c4nderung der PIN auf 4 Stellen \u00dcber das X kann das Programm beendet werden \u00dcber die Abbrechen-Funktion im Menu kann sich der Benutzer abmelden Die internen Klassen, die das Event-Handling \u00fcbernahmen, wurden entfernt Event-Handling der UI Elemente werden mit zwei Interfaces umgesetzt KeypadListener.java kommuniziert die Tastendr\u00fccke ATMListener.java kommuniziert einen Modus-Wechsel und das Bet\u00e4tigen der Enter-Taste Auslagerung der Admin-Ansicht in ein neues Fenster AdminView.java Die Sprache des Programms wurde auf Deutsch ge\u00e4ndert Verbessertes Error-Handling Accounts werden mit einer .json Datei gelesen und gespeichert Geld wird in Scheinen aus dem Vorrat im Cash Dispenser ausgegeben Es werden die h\u00f6chstm\u00f6glichen Scheine gew\u00e4hlt","title":"Durchgef\u00fchrte Ver\u00e4nderungen"},{"location":"codedocs/is-docs/","text":"Code Ist-Dokumentation Die Beschreibung in diesem Dokument ist zus\u00e4tzlich zu dem kommentierten Code im Ordner ATM-Machine-Old . Klassen ATMCaseStudy.java Erstellt eine ATM Instanz und startet diese, wenn noch keine vorhanden ATM.java Stellt die Hauptklasse des ATMs dar Initialisiert UI mit Keypad, CashDispenser, DepositSlot und Bankdatabase Es gibt viele unbenutzte konstante int Variablen Sobald Enter bet\u00e4tigt wird, wird die PIN \u00fcberpr\u00fcft (login) Wenn man eingeloggt ist, wird das Men\u00fc angezeigt, wenn man als Admin eingeloggt ist, wird das Admin-Men\u00fc angezeigt Im Men\u00fc kann man nun zwischen Funktionen w\u00e4hlen: balance : Eigenes Guthaben anzeigen withdrawal : Geld abheben, indem man die Scheine einzeln w\u00e4hlt deposit : Geld einzahlen. Geld ist erst verf\u00fcgbar, wenn \u00fcberpr\u00fcft. exit : F\u00fchrt Login erneut aus, \u00f6ffnet allerdings neues Fenster Sollte man als Admin angemeldet sein, \u00f6ffnet sich die Adminoberfl\u00e4che mit diesen Funktionen: Kontostand jedes Nutzers einsehen Zwischen Accounts wecheln Accounts l\u00f6schen Neue Accounts hinzuf\u00fcgen Transaction.java Abstrakte Klasse, die mit einer AccountNummer, dem Screen-Objekt und dem BankDatabase-Objekt initialisiert wird. BalanceInquiry.java Erbt von Transactions und \u00fcberschreibt die Execute-Funktion Die Execute-Funktion gibt den Kontostand auf dem Screen aus Withdrawal.java Erbt von Transactions und \u00fcberschreibt die Execute-Funktion Die Execute-Funktion zeigt die Buttons zur Scheinauswahl an Die Transaction-Funktion erm\u00f6glicht das Abheben von Geld, wenn noch gen\u00fcgend auf dem Konto und im CashDispenser verf\u00fcgbar ist Man kann nur in 20er Scheinen abheben Deposit.java Erbt von Transactions und \u00fcberschreibt die Execute-Funktion Die Execute-Funktion zeigt UI zum Geldeinzahlen an Beim Geldeinzahlen wird gepr\u00fcft, ob das Geld eingezahlt wurde DepositSlot.java Klasse ist nicht vorhanden Hier sollte \u00fcberpr\u00fcft werden, ob das Geld vorhanden ist CashDispenser.java Startet mit 500 20$ Scheinen BankDatabase.java Initialisiert alle Accounts Authentifiziert Nutzer anhand der PIN Funktionen um anhand der AccountNummer Daten \u00fcber den Account abzurufen (verf\u00fcgbares Guthaben, etc) Besitzt Funktionen um Guthaben von Accounts abzuziehen oder aufzuladen Fehler: getaccpin funktioniert nicht Funktion um tempor\u00e4r einen Account zu erstellen und dem Account-Array hinzuzuf\u00fcgen Funktion um tempor\u00e4r einen Account zu l\u00f6schen Account.java Besitzt Eigenschaften eines Benutzers Funktion um Pin mit aktuellem Account zu verifizieren Getter und Setter AccountFactory.java Wird nicht verwendet Erbt von Account, initialisiert einen Account Iterator Interface, das zwei Funktionen beinhaltet, die einen Wahrheitswert zur\u00fcckgeben, ob von der aktuellen Position ein n\u00e4chstes oder vorheriges Element existiert Funktion, die ein Objekt zur\u00fcck gibt, anhand einer Position AccountIterator.java Implementiert das Iterator Interface und \u00fcberschreibt dessen Funktionen Screen.java JFrame-Komponente, die Textfelder, Labels und Buttons besitzt Besitzt Funktionen um Nachrichten in der Konsole auszugeben Besitzt Funktionen um UI-Elemente anzuzeigen: Login Men\u00fc Kontostand Geldauszahlung Geldeinzahlung Admin-Ansicht Keypad.java Besitzt unbenutze Scanner-Funktion Besitzt JButtons f\u00fcr ein Tastenfeld mit L\u00f6schen und Enter Funktionen Funktion, um ein JPanel mit Buttons zu initialisieren und zur\u00fcckgeben Fehler: Endlos-Schleife userinput()","title":"Ist-Dokumentation"},{"location":"codedocs/is-docs/#code-ist-dokumentation","text":"Die Beschreibung in diesem Dokument ist zus\u00e4tzlich zu dem kommentierten Code im Ordner ATM-Machine-Old .","title":"Code Ist-Dokumentation"},{"location":"codedocs/is-docs/#klassen","text":"ATMCaseStudy.java Erstellt eine ATM Instanz und startet diese, wenn noch keine vorhanden ATM.java Stellt die Hauptklasse des ATMs dar Initialisiert UI mit Keypad, CashDispenser, DepositSlot und Bankdatabase Es gibt viele unbenutzte konstante int Variablen Sobald Enter bet\u00e4tigt wird, wird die PIN \u00fcberpr\u00fcft (login) Wenn man eingeloggt ist, wird das Men\u00fc angezeigt, wenn man als Admin eingeloggt ist, wird das Admin-Men\u00fc angezeigt Im Men\u00fc kann man nun zwischen Funktionen w\u00e4hlen: balance : Eigenes Guthaben anzeigen withdrawal : Geld abheben, indem man die Scheine einzeln w\u00e4hlt deposit : Geld einzahlen. Geld ist erst verf\u00fcgbar, wenn \u00fcberpr\u00fcft. exit : F\u00fchrt Login erneut aus, \u00f6ffnet allerdings neues Fenster Sollte man als Admin angemeldet sein, \u00f6ffnet sich die Adminoberfl\u00e4che mit diesen Funktionen: Kontostand jedes Nutzers einsehen Zwischen Accounts wecheln Accounts l\u00f6schen Neue Accounts hinzuf\u00fcgen Transaction.java Abstrakte Klasse, die mit einer AccountNummer, dem Screen-Objekt und dem BankDatabase-Objekt initialisiert wird. BalanceInquiry.java Erbt von Transactions und \u00fcberschreibt die Execute-Funktion Die Execute-Funktion gibt den Kontostand auf dem Screen aus Withdrawal.java Erbt von Transactions und \u00fcberschreibt die Execute-Funktion Die Execute-Funktion zeigt die Buttons zur Scheinauswahl an Die Transaction-Funktion erm\u00f6glicht das Abheben von Geld, wenn noch gen\u00fcgend auf dem Konto und im CashDispenser verf\u00fcgbar ist Man kann nur in 20er Scheinen abheben Deposit.java Erbt von Transactions und \u00fcberschreibt die Execute-Funktion Die Execute-Funktion zeigt UI zum Geldeinzahlen an Beim Geldeinzahlen wird gepr\u00fcft, ob das Geld eingezahlt wurde DepositSlot.java Klasse ist nicht vorhanden Hier sollte \u00fcberpr\u00fcft werden, ob das Geld vorhanden ist CashDispenser.java Startet mit 500 20$ Scheinen BankDatabase.java Initialisiert alle Accounts Authentifiziert Nutzer anhand der PIN Funktionen um anhand der AccountNummer Daten \u00fcber den Account abzurufen (verf\u00fcgbares Guthaben, etc) Besitzt Funktionen um Guthaben von Accounts abzuziehen oder aufzuladen Fehler: getaccpin funktioniert nicht Funktion um tempor\u00e4r einen Account zu erstellen und dem Account-Array hinzuzuf\u00fcgen Funktion um tempor\u00e4r einen Account zu l\u00f6schen Account.java Besitzt Eigenschaften eines Benutzers Funktion um Pin mit aktuellem Account zu verifizieren Getter und Setter AccountFactory.java Wird nicht verwendet Erbt von Account, initialisiert einen Account Iterator Interface, das zwei Funktionen beinhaltet, die einen Wahrheitswert zur\u00fcckgeben, ob von der aktuellen Position ein n\u00e4chstes oder vorheriges Element existiert Funktion, die ein Objekt zur\u00fcck gibt, anhand einer Position AccountIterator.java Implementiert das Iterator Interface und \u00fcberschreibt dessen Funktionen Screen.java JFrame-Komponente, die Textfelder, Labels und Buttons besitzt Besitzt Funktionen um Nachrichten in der Konsole auszugeben Besitzt Funktionen um UI-Elemente anzuzeigen: Login Men\u00fc Kontostand Geldauszahlung Geldeinzahlung Admin-Ansicht Keypad.java Besitzt unbenutze Scanner-Funktion Besitzt JButtons f\u00fcr ein Tastenfeld mit L\u00f6schen und Enter Funktionen Funktion, um ein JPanel mit Buttons zu initialisieren und zur\u00fcckgeben Fehler: Endlos-Schleife userinput()","title":"Klassen"}]}